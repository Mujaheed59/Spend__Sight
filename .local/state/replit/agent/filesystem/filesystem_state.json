{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nExpenseAI is a full-stack AI-powered expense tracking application that helps users manage their finances with intelligent categorization and insights. Built as a modern web application, it combines React frontend with Express backend, featuring AI-driven expense categorization, real-time data visualization, and personalized budgeting recommendations.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack React Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with OpenID Connect for user management\n- **Session Management**: Express sessions with PostgreSQL session store\n- **API Design**: RESTful endpoints with consistent error handling and response formatting\n\n## Data Storage\n- **Primary Database**: PostgreSQL via Neon serverless database\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Session Storage**: PostgreSQL table for user session persistence\n- **Data Models**: Users, expenses, categories, insights, and budgets with proper relationships\n\n## Authentication & Authorization\n- **Provider**: Replit Auth using OpenID Connect protocol\n- **Session Management**: Server-side sessions with HTTP-only cookies\n- **User Model**: Required for Replit Auth integration with profile information storage\n- **Authorization**: Route-level protection with middleware for authenticated endpoints\n\n## AI Integration\n- **Provider**: Google Gemini 2.5 Pro for intelligent features\n- **Expense Categorization**: Automatic classification of expenses into predefined categories\n- **Smart Insights**: Personalized budgeting recommendations and spending analysis\n- **Natural Language Processing**: Context-aware expense description analysis for better categorization\n\n# External Dependencies\n\n## Core Services\n- **Database**: Neon PostgreSQL serverless database for data persistence\n- **AI Service**: Google Gemini API for expense categorization and insights generation\n- **Authentication**: Replit Auth service for user authentication and profile management\n\n## Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Database Migrations**: Drizzle Kit for schema management and migrations\n- **Type Safety**: TypeScript across the entire stack with shared types\n\n## UI/UX Libraries\n- **Component Library**: Radix UI primitives for accessible, unstyled components\n- **Design System**: shadcn/ui for pre-styled, customizable components\n- **Charts**: Recharts for data visualization and expense analytics\n- **Icons**: Lucide React for consistent iconography\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n\n## Runtime Dependencies\n- **HTTP Client**: Native fetch API with custom wrapper for type-safe requests\n- **Form Validation**: Zod for runtime type validation and schema definition\n- **Date Handling**: date-fns for date manipulation and formatting\n- **WebSocket Support**: Configured for potential real-time features","size_bytes":3654},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        primary: {\n          DEFAULT: \"hsl(24, 95%, 53%)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(33, 100%, 85%)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(45, 93%, 68%)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        error: {\n          DEFAULT: \"#ef4444\",\n        },\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2862},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || 'fallback-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !user.password || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n\n// Middleware to protect routes\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}","size_bytes":2949},"server/db-test.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\nasync function testConnection() {\n  try {\n    const result = await pool.query('SELECT 1+1 AS result');\n    console.log('Database connected! Test result:', result.rows[0]);\n    process.exit(0);\n  } catch (err) {\n    console.error('Database connection failed:', err);\n    process.exit(1);\n  }\n}\n\ntestConnection();\ntestConnection();\n","size_bytes":524},"server/db.ts":{"content":"import 'dotenv/config'; // Load .env variables\nimport mongoose from 'mongoose';\n\n// MongoDB connection with robust error handling\nconst connectDB = async () => {\n  try {\n    // Try multiple connection options for flexibility\n    const mongoURIs = [\n      process.env.MONGODB_URI,\n      process.env.DATABASE_URL?.startsWith('mongodb') ? process.env.DATABASE_URL : undefined,\n      'mongodb://127.0.0.1:27017/spendsight',\n      'mongodb://localhost:27017/spendsight'\n    ].filter(Boolean);\n    \n    let connected = false;\n    for (const mongoURI of mongoURIs) {\n      try {\n        await mongoose.connect(mongoURI, {\n          serverSelectionTimeoutMS: 10000,\n          socketTimeoutMS: 45000,\n          bufferCommands: false,\n          maxPoolSize: 10,\n          minPoolSize: 2,\n          connectTimeoutMS: 10000,\n        });\n        console.log('✅ MongoDB connected successfully to:', mongoURI);\n        console.log('📊 Database: spendsight');\n        connected = true;\n        break;\n      } catch (err) {\n        console.log(`❌ Failed to connect to ${mongoURI}`);\n      }\n    }\n    \n    if (!connected) {\n      throw new Error('All MongoDB connection attempts failed');\n    }\n    \n    // Listen for connection events\n    mongoose.connection.on('error', (err) => {\n      console.error('❌ MongoDB connection error:', err);\n    });\n    \n    mongoose.connection.on('disconnected', () => {\n      console.log('⚠️  MongoDB disconnected, switching to memory storage');\n    });\n    \n    mongoose.connection.on('reconnected', () => {\n      console.log('✅ MongoDB reconnected');\n    });\n    \n  } catch (error) {\n    console.error('❌ MongoDB connection failed - using in-memory storage');\n    console.log('💾 Application will continue with enhanced in-memory storage');\n  }\n};\n\n// Initialize connection immediately\nconnectDB();\n\nexport { mongoose };\nexport default mongoose;","size_bytes":1882},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { setupAuth } from \"./auth\";\nimport { setupWebSocket } from \"./websocket\";\n\nconst app = express();\n\n// ✅ Middleware for JSON + URL parsing\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// ✅ Enable CORS so frontend can access backend (both on port 5000)\napp.use(\n  cors({\n    origin: \"http://localhost:5000\", // same port for Vite dev\n    credentials: true,                // allow cookies/session\n  })\n);\n\n// ✅ Mount authentication routes\nsetupAuth(app);\n\n// ✅ Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // ✅ Create HTTP server\n  const httpServer = createServer(app);\n\n  // ✅ Register all other API routes\n  const server = await registerRoutes(app, httpServer);\n\n  // ✅ Setup WebSocket for real-time updates\n  const wsService = setupWebSocket(httpServer);\n  \n  // ✅ Make WebSocket service available to routes\n  app.set('wsService', wsService);\n\n  // ✅ Global error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    log(`❌ Error: ${status} - ${message}`);\n  });\n\n  // ✅ Vite in dev, static files in prod\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, httpServer);\n  } else {\n    serveStatic(app);\n  }\n\n  // ✅ Always listen on PORT (default 5000)\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  const listener = httpServer.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`🚀 Backend server running on http://localhost:${port}`);\n      log(`🔗 WebSocket server ready on ws://localhost:${port}/ws`);\n    }\n  );\n\n  listener.on(\"error\", (err: any) => {\n    if (err.code === \"EADDRINUSE\") {\n      console.error(\n        `❌ Port ${port} is already in use. Please stop the other process or use a different port.`\n      );\n      process.exit(1);\n    } else {\n      throw err;\n    }\n  });\n})();\n","size_bytes":3036},"server/openai.ts":{"content":"import * as fs from \"fs\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface ExpenseCategorization {\n  category: string;\n  confidence: number;\n  reasoning: string;\n}\n\nexport interface AIInsight {\n  type: 'alert' | 'goal' | 'warning' | 'recommendation';\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high';\n}\n\nexport async function categorizeExpense(description: string, amount: number): Promise<ExpenseCategorization> {\n  try {\n    const systemPrompt = `You are an advanced expense categorization AI. Analyze expense descriptions and amounts to categorize them accurately.\n          \n          Available categories:\n          - transportation: Transportation (uber, ola, taxi, bus, metro, train, fuel, petrol, diesel, parking, auto, rickshaw, bike, car, vehicle maintenance, travel within city)\n          - food: Food & Dining (restaurants, groceries, coffee, food delivery, zomato, swiggy, dominos, mcdonald, kfc, starbucks, snacks, beverages, dining out)\n          - shopping: Shopping (clothes, electronics, household items, amazon, flipkart, myntra, online purchases, general retail, gadgets, accessories)\n          - entertainment: Entertainment (movies, games, netflix, spotify, prime, youtube, subscriptions, concerts, sports events, hobbies, cinema)\n          - bills: Bills & Utilities (electricity, internet, phone, rent, insurance, loan payments, emi, mobile recharge, wifi, broadband)\n          - healthcare: Healthcare (doctor visits, medicines, hospital bills, dental, health insurance, pharmacy, clinic, medical tests)\n          - education: Education (courses, books, tuition, school, university, online learning, certifications, coaching)\n          - travel: Travel (flights, hotels, vacation expenses, travel bookings, sightseeing, tour packages, airbnb)\n          \n          STRICT CATEGORIZATION RULES (follow exactly):\n          \n          TRANSPORTATION (highest priority for these keywords):\n          - ANY mention of: uber, ola, taxi, cab, bus, metro, train, auto, rickshaw, petrol, diesel, fuel, parking\n          - Vehicle related: bike, car, scooter, vehicle maintenance, service\n          - Even if combined with other words: \"ola ride\", \"uber to airport\", \"bus fare\", \"metro ticket\"\n          \n          FOOD & DINING:\n          - Restaurants: starbucks, mcdonald, kfc, dominos, pizza hut, burger king, subway\n          - Food delivery: zomato, swiggy, uber eats, food panda, dunzo (food)\n          - Food items: coffee, tea, lunch, dinner, breakfast, groceries, vegetables, fruits\n          \n          SHOPPING:\n          - E-commerce: amazon, flipkart, myntra, nykaa (unless food items mentioned)\n          - General retail: mall, market, shopping, clothes, electronics, gadgets\n          \n          ENTERTAINMENT:\n          - Streaming: netflix, spotify, prime, youtube premium, hotstar, disney\n          - Events: movie, cinema, concert, game, sports event\n          \n          BILLS & UTILITIES:\n          - Services: electricity, internet, wifi, broadband, mobile recharge, phone bill\n          - Payments: rent, emi, loan, insurance premium\n          \n          IMPORTANT: If description contains \"ola\", \"uber\", \"taxi\", \"bus\", \"metro\" - ALWAYS categorize as TRANSPORTATION, never shopping!\n          \n          Confidence scoring:\n          - 0.9-1.0: Very clear keywords (e.g., \"Starbucks Coffee\", \"Uber ride\")\n          - 0.7-0.89: Good context clues (e.g., \"Movie tickets\", \"Grocery shopping\")\n          - 0.5-0.69: Reasonable inference (e.g., \"Mall purchase\", \"Online payment\")\n          - 0.3-0.49: Uncertain, default to shopping\n          \n          Respond with JSON: { \"category\": \"category_name\", \"confidence\": 0.95, \"reasoning\": \"brief explanation why this category fits\" }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            category: { type: \"string\" },\n            confidence: { type: \"number\" },\n            reasoning: { type: \"string\" },\n          },\n          required: [\"category\", \"confidence\", \"reasoning\"],\n        },\n      },\n      contents: `Categorize this expense: \"${description}\" with amount ₹${amount}`,\n    });\n\n    const rawJson = response.text;\n    \n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return {\n        category: result.category || 'shopping',\n        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n        reasoning: result.reasoning || 'AI categorization based on description'\n      };\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error('Error categorizing expense:', error);\n    return {\n      category: 'shopping',\n      confidence: 0.1,\n      reasoning: 'Default categorization due to AI service error'\n    };\n  }\n}\n\nexport async function generateInsights(\n  expenses: Array<{ amount: number; categoryName: string; date: string; description: string }>,\n  previousMonthExpenses: Array<{ amount: number; categoryName: string; date: string; description: string }>,\n  budgets: Array<{ categoryName: string; amount: number }>\n): Promise<AIInsight[]> {\n  try {\n    const currentTotal = expenses.reduce((sum, exp) => sum + exp.amount, 0);\n    const previousTotal = previousMonthExpenses.reduce((sum, exp) => sum + exp.amount, 0);\n    \n    // Calculate detailed category breakdowns\n    const currentCategories = expenses.reduce((acc, exp) => {\n      acc[exp.categoryName] = (acc[exp.categoryName] || 0) + exp.amount;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const previousCategories = previousMonthExpenses.reduce((acc, exp) => {\n      acc[exp.categoryName] = (acc[exp.categoryName] || 0) + exp.amount;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    // Calculate spending trends and patterns\n    const categoryTrends = Object.keys(currentCategories).map(category => {\n      const current = currentCategories[category] || 0;\n      const previous = previousCategories[category] || 0;\n      const change = previous > 0 ? ((current - previous) / previous) * 100 : 0;\n      return { category, current, previous, change };\n    });\n    \n    // Budget analysis\n    const budgetAnalysis = budgets.map(budget => {\n      const spent = currentCategories[budget.categoryName] || 0;\n      const remaining = budget.amount - spent;\n      const utilization = budget.amount > 0 ? (spent / budget.amount) * 100 : 0;\n      return { \n        category: budget.categoryName, \n        budget: budget.amount, \n        spent, \n        remaining, \n        utilization,\n        isOverBudget: spent > budget.amount\n      };\n    });\n    \n    // Prepare comprehensive expense summary for AI\n    const expenseSummary = {\n      currentMonth: {\n        total: currentTotal,\n        categoryBreakdown: currentCategories,\n        expenseCount: expenses.length,\n        averageExpense: expenses.length > 0 ? currentTotal / expenses.length : 0\n      },\n      previousMonth: {\n        total: previousTotal,\n        categoryBreakdown: previousCategories,\n        expenseCount: previousMonthExpenses.length\n      },\n      trends: categoryTrends,\n      budgetAnalysis,\n      totalBudget: budgets.reduce((sum, b) => sum + b.amount, 0),\n      savingsOpportunities: categoryTrends.filter(t => t.change > 20).map(t => ({\n        category: t.category,\n        increase: t.change,\n        currentSpend: t.current,\n        potentialSaving: t.current * 0.15 // Suggest 15% reduction\n      }))\n    };\n\n    const systemPrompt = `You are an expert personal financial advisor AI. Analyze real-time spending data and provide specific, actionable insights.\n          \n          Generate EXACTLY 3 insights based on the comprehensive data provided. Each insight must have:\n          - type: \"alert\" (urgent overspending/budget violations), \"goal\" (achievements worth celebrating), \"warning\" (approaching budget limits), or \"recommendation\" (specific improvement suggestions)\n          - title: Compelling, specific title (max 45 chars)\n          - description: Detailed, actionable advice with exact amounts, percentages, and timeframes\n          - priority: \"low\", \"medium\", or \"high\" based on financial impact\n          \n          PRIORITY ANALYSIS AREAS:\n          1. Budget violations (over 100% utilization) - HIGH priority alerts\n          2. Significant spending increases (>30% vs previous month) - HIGH priority warnings\n          3. Categories approaching budget limits (80-100%) - MEDIUM priority warnings\n          4. Savings opportunities from high-spend categories - MEDIUM priority recommendations\n          5. Positive spending behaviors - LOW priority goals\n          \n          INSIGHT REQUIREMENTS:\n          - Include specific ₹ amounts and percentages\n          - Compare current vs previous month spending\n          - Mention exact savings amounts possible\n          - Provide realistic timelines (weekly/monthly targets)\n          - Use encouraging tone for achievements, constructive for improvements\n          - Be specific: \"You spent ₹X more on Y\" rather than \"You spent more\"\n          \n          EXAMPLES OF GOOD INSIGHTS:\n          - \"You spent 35% more on Food this month (₹4,200 vs ₹3,100). If you reduce dining out by 2 meals per week, you could save ₹800/month.\"\n          - \"Great job! You stayed 15% under budget in Transportation (₹1,700 vs ₹2,000 budget). Keep using public transport!\"\n          \n          IMPORTANT: Generate exactly 3 insights, no more, no less. Focus on the most impactful financial insights.\n          \n          Respond with JSON: {\"insights\": [{\"type\": \"alert\", \"title\": \"Food Budget Exceeded\", \"description\": \"You spent ₹4,200 on Food this month, 40% over your ₹3,000 budget. Consider meal planning to save ₹400/month.\", \"priority\": \"high\"}]}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            insights: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  type: { type: \"string\" },\n                  title: { type: \"string\" },\n                  description: { type: \"string\" },\n                  priority: { type: \"string\" },\n                },\n                required: [\"type\", \"title\", \"description\", \"priority\"],\n              },\n            },\n          },\n          required: [\"insights\"],\n        },\n      },\n      contents: `Analyze this spending data and provide insights: ${JSON.stringify(expenseSummary)}`,\n    });\n\n    const rawJson = response.text;\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from model\");\n    }\n    \n    const result = JSON.parse(rawJson);\n    \n    return (result.insights || []).map((insight: any) => ({\n      type: ['alert', 'goal', 'warning', 'recommendation'].includes(insight.type) ? insight.type : 'recommendation',\n      title: insight.title || 'Financial Insight',\n      description: insight.description || 'Review your spending patterns for better financial health.',\n      priority: ['low', 'medium', 'high'].includes(insight.priority) ? insight.priority : 'medium'\n    }));\n  } catch (error) {\n    console.error('Error generating insights:', error);\n    return [\n      {\n        type: 'recommendation',\n        title: 'Track Your Expenses',\n        description: 'Continue logging your expenses to get personalized AI insights and recommendations.',\n        priority: 'medium'\n      },\n      {\n        type: 'goal',\n        title: 'Building Financial Habits',\n        description: 'Every expense you track helps build better financial awareness and spending habits.',\n        priority: 'low'\n      },\n      {\n        type: 'warning',\n        title: 'AI Insights Unavailable',\n        description: 'AI insights are temporarily unavailable. Keep tracking expenses for future analysis.',\n        priority: 'low'\n      }\n    ];\n  }\n}\n\nexport async function generateBudgetRecommendations(\n  expenses: Array<{ amount: number; categoryName: string; date: string }>,\n  income?: number\n): Promise<Record<string, number>> {\n  try {\n    const categoryTotals = expenses.reduce((acc, exp) => {\n      acc[exp.categoryName] = (acc[exp.categoryName] || 0) + exp.amount;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const systemPrompt = `You are a financial planning expert. Based on spending history, recommend monthly budgets for each category.\n          Consider the 50/30/20 rule and reasonable spending patterns.\n          Respond with JSON where keys are category names and values are recommended amounts.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: `Recommend monthly budgets based on this spending: ${JSON.stringify(categoryTotals)}${income ? ` with monthly income: ₹${income}` : ''}`,\n    });\n\n    const rawJson = response.text;\n    \n    if (!rawJson) {\n      throw new Error(\"Empty response from model\");\n    }\n    \n    const result = JSON.parse(rawJson);\n    return result;\n  } catch (error) {\n    console.error('Error generating budget recommendations:', error);\n    return {};\n  }\n}\n","size_bytes":13932},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"// server/routes.ts\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { insertExpenseSchema, insertCategorySchema, insertBudgetSchema } from \"@shared/schema\";\nimport { categorizeExpense, generateInsights, generateBudgetRecommendations } from \"./openai\";\nimport { getUserExpenseSummary } from \"./services/expenseSummary\";  // new\nimport { InsightModel as Insight } from \"./models.js\";                             // new\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express, httpServer?: any): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Initialize default categories\n  await initializeDefaultCategories();\n\n  // -----------------------\n  // Finance News API\n  // -----------------------\n  app.get(\"/api/finance-news\", async (req, res) => {\n    try {\n      // Mock finance news data based on real Indian fintech trends\n      const financeNews = [\n        {\n          title: \"India's Fintech Sector Ranks 3rd Globally in H1 2025 Funding\",\n          description: \"India secured $889 million in fintech funding, with early-stage funding up 10% and 16 M&A deals recorded.\",\n          url: \"https://www.business-standard.com/industry/news/india-fintech-funding-h1-2025-tracxn-startups-ma-deals-125070400644_1.html\",\n          source: \"Business Standard\",\n          publishedAt: new Date().toISOString(),\n          category: \"fintech\"\n        },\n        {\n          title: \"MoneyView Becomes India's Latest Fintech Unicorn at $1.21B Valuation\",\n          description: \"The lending platform joins India's growing list of 24 fintech unicorns, focusing on personal loans and financial services.\",\n          url: \"https://fintechnews.sg/108940/fintech-india/the-complete-list-of-india-fintech-unicorns-2025/\",\n          source: \"FinTech News\",\n          publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n          category: \"fintech\"\n        },\n        {\n          title: \"Groww Acquires Fisdom for $150M in Largest H1 2025 Deal\",\n          description: \"The acquisition strengthens Groww's position in wealth management and investment advisory services.\",\n          url: \"#\",\n          source: \"Economic Times\",\n          publishedAt: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n          category: \"fintech\"\n        },\n        {\n          title: \"RBI Governor Meets Fintech Leaders, Signals Regulatory Easing\",\n          description: \"Sanjay Malhotra's meeting with industry leaders indicates potential policy support for responsible fintech innovation.\",\n          url: \"#\",\n          source: \"Mint\",\n          publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n          category: \"banking\"\n        },\n        {\n          title: \"UPI International Expansion Reaches France, Singapore\",\n          description: \"India's digital payment system continues global expansion with new partnerships and cross-border capabilities.\",\n          url: \"#\",\n          source: \"Hindu BusinessLine\",\n          publishedAt: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\n          category: \"payments\"\n        },\n        {\n          title: \"Indian Fintech Market to Reach $95.30B by 2030\",\n          description: \"Market expected to grow at 16.65% CAGR driven by digital adoption and financial inclusion initiatives.\",\n          url: \"https://www.mordorintelligence.com/industry-reports/india-fintech-market\",\n          source: \"Mordor Intelligence\",\n          publishedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n          category: \"markets\"\n        }\n      ];\n      \n      res.json(financeNews);\n    } catch (error) {\n      console.error(\"Error fetching finance news:\", error);\n      res.status(500).json({ message: \"Failed to fetch finance news\" });\n    }\n  });\n\n  // -----------------------\n  // User Profile\n  // -----------------------\n  app.get(\"/api/user/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      // For now, return a basic profile. In future, this could be stored in database\n      const profile = {\n        id: userId,\n        monthlyIncome: 50000, // Default monthly income in INR\n        currency: 'INR',\n        timezone: 'Asia/Kolkata'\n      };\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  app.put(\"/api/user/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { monthlyIncome, currency, timezone } = req.body;\n      \n      // For now, just return the updated data. In future, store in database\n      const updatedProfile = {\n        id: userId,\n        monthlyIncome: monthlyIncome || 50000,\n        currency: currency || 'INR',\n        timezone: timezone || 'Asia/Kolkata'\n      };\n      \n      res.json(updatedProfile);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n\n  // -----------------------\n  // Categories\n  // -----------------------\n  app.get(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req, res) => {\n    try {\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating category:\", error);\n        res.status(500).json({ message: \"Failed to create category\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCategory(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // -----------------------\n  // Expenses\n  // -----------------------\n  app.get(\"/api/expenses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const expenses = await storage.getExpensesByUser(userId, limit);\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const validatedData = insertExpenseSchema.parse(req.body);\n\n      // AI categorization if no category\n      let categoryId = validatedData.categoryId;\n      if (!categoryId && validatedData.description) {\n        const categorization = await categorizeExpense(validatedData.description, parseFloat(validatedData.amount));\n        const categories = await storage.getCategories();\n        const matchedCategory = categories.find(cat =>\n          cat.name.toLowerCase().includes(categorization.category.toLowerCase())\n        );\n        if (matchedCategory) categoryId = matchedCategory.id;\n      }\n\n      const expense = await storage.createExpense({\n        ...validatedData,\n        categoryId,\n        userId,\n      });\n\n      res.json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error creating expense:\", error);\n        res.status(500).json({ message: \"Failed to create expense\" });\n      }\n    }\n  });\n\n  app.put(\"/api/expenses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertExpenseSchema.partial().parse(req.body);\n      const expense = await storage.updateExpense(id, validatedData);\n      res.json(expense);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        console.error(\"Error updating expense:\", error);\n        res.status(500).json({ message: \"Failed to update expense\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteExpense(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      res.status(500).json({ message: \"Failed to delete expense\" });\n    }\n  });\n\n  // -----------------------\n  // Analytics\n  // -----------------------\n  app.get(\"/api/analytics/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { startDate, endDate } = req.query;\n\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n\n      const stats = await storage.getExpenseStats(userId, startDate as string, endDate as string);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // -----------------------\n  // AI Budget Recommendations\n  // -----------------------\n  app.get(\"/api/ai/budget-recommendations\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const expenses = await storage.getExpensesByUser(userId);\n\n      if (expenses.length === 0) return res.json([]);\n\n      const expensesWithCategories = expenses.map(exp => ({\n        amount: typeof exp.amount === \"string\" ? parseFloat(exp.amount) : exp.amount,\n        categoryName: exp.category?.name || \"Other\",\n        date: exp.date,\n        description: exp.description,\n      }));\n\n      const recommendations = await generateBudgetRecommendations(expensesWithCategories);\n\n      const formatted = Object.entries(recommendations).map(([category, amount]) => {\n        const categorySpend = expensesWithCategories\n          .filter(e => e.categoryName === category)\n          .reduce((sum, e) => sum + e.amount, 0);\n\n        return {\n          category,\n          currentSpend: categorySpend,\n          recommendedBudget: amount,\n          potentialSavings: Math.max(0, categorySpend - amount),\n          reason: `AI suggests ₹${amount}/month for ${category} based on your spending patterns.`,\n        };\n      });\n\n      res.json(formatted);\n    } catch (error) {\n      console.error(\"Error generating budget recommendations:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // -----------------------\n  // AI Insights\n  // -----------------------\n  app.get(\"/api/insights\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const insights = await storage.getInsightsByUser(userId);\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error fetching insights:\", error);\n      res.status(500).json({ message: \"Failed to fetch insights\" });\n    }\n  });\n\n  app.post(\"/api/insights/generate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      await storage.clearUserInsights(userId);\n\n      // Get current month expenses\n      const currentDate = new Date();\n      const startCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      \n      // Get previous month expenses\n      const startPreviousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\n      const endPreviousMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\n\n      const currentExpenses = await storage.getExpensesByUser(userId);\n      const currentFiltered = currentExpenses.filter(exp => {\n        const expDate = new Date(exp.date);\n        return expDate >= startCurrentMonth && expDate <= endCurrentMonth;\n      });\n\n      const previousFiltered = currentExpenses.filter(exp => {\n        const expDate = new Date(exp.date);\n        return expDate >= startPreviousMonth && expDate <= endPreviousMonth;\n      });\n\n      const formattedCurrent = currentFiltered.map(exp => ({\n        amount: typeof exp.amount === \"string\" ? parseFloat(exp.amount) : exp.amount,\n        categoryName: exp.category?.name || \"Other\",\n        date: exp.date,\n        description: exp.description,\n      }));\n\n      const formattedPrevious = previousFiltered.map(exp => ({\n        amount: typeof exp.amount === \"string\" ? parseFloat(exp.amount) : exp.amount,\n        categoryName: exp.category?.name || \"Other\",\n        date: exp.date,\n        description: exp.description,\n      }));\n\n      const formattedBudgets: any[] = [];\n\n      const aiInsights = await generateInsights(formattedCurrent, formattedPrevious, formattedBudgets);\n\n      const savedInsights = await Promise.all(\n        aiInsights.map(insight =>\n          storage.createInsight({ ...insight, userId, isRead: \"false\" })\n        )\n      );\n\n      res.json(savedInsights);\n    } catch (error) {\n      console.error(\"Error generating insights:\", error);\n      res.status(500).json({ message: \"Failed to generate insights\" });\n    }\n  });\n\n  app.put(\"/api/insights/:id/read\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markInsightAsRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking insight as read:\", error);\n      res.status(500).json({ message: \"Failed to mark insight as read\" });\n    }\n  });\n\n  // -----------------------\n  // NEW: Custom Range Insights\n  // -----------------------\n  app.post(\"/api/insights/custom\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { start, end } = req.body;\n      const userId = req.user.id;\n\n      const summary = await getUserExpenseSummary(userId, new Date(start), new Date(end));\n      const insights = await generateInsights(summary, [], []);\n\n      const saved = await Insight.create({\n        userId,\n        periodStart: start,\n        periodEnd: end,\n        recommendations: insights.length > 0 ? insights[0].description : \"No recommendations available\",\n        savingsTips: insights.length > 1 ? insights[1].description : \"No savings tips available\", \n        rawResponse: insights,\n      });\n\n      res.json(saved);\n    } catch (err) {\n      console.error(\"Error generating custom insights:\", err);\n      res.status(500).json({ error: \"Failed to generate insights\" });\n    }\n  });\n\n  // -----------------------\n  // AI Categorization\n  // -----------------------\n  app.post(\"/api/ai/categorize\", isAuthenticated, async (req, res) => {\n    try {\n      const { description, amount } = req.body;\n      if (!description) {\n        return res.status(400).json({ message: \"Description is required\" });\n      }\n\n      const categorization = await categorizeExpense(description, amount || 0);\n      const categories = await storage.getCategories();\n      const matchedCategory = categories.find(cat =>\n        cat.name.toLowerCase().includes(categorization.category.toLowerCase())\n      );\n\n      res.json({\n        ...categorization,\n        suggestedCategoryId: matchedCategory?.id || null,\n        suggestedCategoryName: matchedCategory?.name || \"Unknown\",\n      });\n    } catch (error) {\n      console.error(\"Error categorizing expense:\", error);\n      res.status(500).json({ message: \"Failed to categorize expense\" });\n    }\n  });\n\n  const server = httpServer || createServer(app);\n  return server;\n}\n\nasync function initializeDefaultCategories() {\n  try {\n    const existingCategories = await storage.getCategories();\n    if (existingCategories.length === 0) {\n      const defaultCategories = [\n        { name: \"Food & Dining\", color: \"#ef4444\", icon: \"🍽️\" },\n        { name: \"Transportation\", color: \"#3b82f6\", icon: \"🚗\" },\n        { name: \"Shopping\", color: \"#10b981\", icon: \"🛍️\" },\n        { name: \"Entertainment\", color: \"#f59e0b\", icon: \"🎬\" },\n        { name: \"Bills & Utilities\", color: \"#8b5cf6\", icon: \"📱\" },\n        { name: \"Healthcare\", color: \"#ec4899\", icon: \"🏥\" },\n        { name: \"Education\", color: \"#06b6d4\", icon: \"📚\" },\n        { name: \"Travel\", color: \"#84cc16\", icon: \"✈️\" },\n      ];\n\n      for (const category of defaultCategories) {\n        await storage.createCategory(category);\n      }\n\n      console.log(\"Default categories initialized\");\n    }\n  } catch (error) {\n    console.error(\"Error initializing default categories:\", error);\n  }\n}\n","size_bytes":17259},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type UpsertUser,\n  type Expense,\n  type ExpenseWithCategory,\n  type InsertExpense,\n  type Category,\n  type InsertCategory,\n  type Insight,\n  type InsertInsight,\n  type Budget,\n  type InsertBudget,\n} from \"@shared/schema\";\nimport { UserModel, CategoryModel, ExpenseModel, InsightModel, BudgetModel } from \"./models\";\nimport session from \"express-session\";\nimport MongoStore from \"connect-mongo\";\nimport MemoryStore from \"memorystore\";\nimport mongoose from \"./db\";\n\nexport interface IStorage {\n  // User operations for local authentication\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Session store for authentication\n  sessionStore: session.Store;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Expense operations\n  getExpensesByUser(userId: string, limit?: number): Promise<ExpenseWithCategory[]>;\n  getExpensesByUserAndDateRange(userId: string, startDate: string, endDate: string): Promise<ExpenseWithCategory[]>;\n  createExpense(expense: InsertExpense & { userId: string }): Promise<Expense>;\n  updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense>;\n  deleteExpense(id: string): Promise<void>;\n  \n  // Insight operations\n  getInsightsByUser(userId: string): Promise<Insight[]>;\n  createInsight(insight: InsertInsight & { userId: string }): Promise<Insight>;\n  markInsightAsRead(id: string): Promise<void>;\n  clearUserInsights(userId: string): Promise<void>;\n  \n  // Budget operations\n  getBudgetsByUser(userId: string): Promise<Budget[]>;\n  createBudget(budget: InsertBudget & { userId: string }): Promise<Budget>;\n  deleteBudget(id: string): Promise<void>;\n  \n  // Enhanced category operations\n  deleteCategory(id: string): Promise<void>;\n  \n  // Analytics\n  getExpenseStats(userId: string, startDate: string, endDate: string): Promise<{\n    totalSpent: number;\n    categoryBreakdown: Array<{ categoryName: string; amount: number; color: string }>;\n    dailyTrend: Array<{ date: string; amount: number }>;\n  }>;\n}\n\nconst MemoryStoreSession = MemoryStore(session);\n\n// In-memory storage implementation as fallback\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private categories: Map<string, Category> = new Map();\n  private expenses: Map<string, Expense> = new Map();\n  private insights: Map<string, Insight> = new Map();\n  private budgets: Map<string, Budget> = new Map();\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new MemoryStoreSession({\n      checkPeriod: 86400000 // prune expired entries every 24h\n    });\n    \n    // Initialize default categories\n    this.initializeDefaultCategories();\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  private initializeDefaultCategories() {\n    const defaultCategories = [\n      { name: \"Food & Dining\", color: \"#ef4444\", icon: \"🍽️\" },\n      { name: \"Transportation\", color: \"#3b82f6\", icon: \"🚗\" },\n      { name: \"Shopping\", color: \"#10b981\", icon: \"🛍️\" },\n      { name: \"Entertainment\", color: \"#f59e0b\", icon: \"🎬\" },\n      { name: \"Bills & Utilities\", color: \"#8b5cf6\", icon: \"📱\" },\n      { name: \"Healthcare\", color: \"#ec4899\", icon: \"🏥\" },\n      { name: \"Education\", color: \"#06b6d4\", icon: \"📚\" },\n      { name: \"Travel\", color: \"#84cc16\", icon: \"✈️\" },\n    ];\n\n    defaultCategories.forEach(cat => {\n      const id = this.generateId();\n      this.categories.set(id, {\n        id,\n        ...cat,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const usersArray = Array.from(this.users.values());\n    return usersArray.find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.generateId();\n    const user: User = {\n      id,\n      ...insertUser,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const id = userData.id || this.generateId();\n    const existingUser = this.users.get(id);\n    const user: User = {\n      ...existingUser,\n      ...userData,\n      id,\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const id = this.generateId();\n    const newCategory: Category = {\n      id,\n      ...category,\n      createdAt: new Date()\n    };\n    this.categories.set(id, newCategory);\n    return newCategory;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    this.categories.delete(id);\n  }\n\n  async getExpensesByUser(userId: string, limit = 50): Promise<ExpenseWithCategory[]> {\n    const userExpenses = Array.from(this.expenses.values())\n      .filter(expense => expense.userId === userId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, limit);\n\n    return userExpenses.map(expense => ({\n      ...expense,\n      category: expense.categoryId ? this.categories.get(expense.categoryId) || null : null\n    }));\n  }\n\n  async getExpensesByUserAndDateRange(userId: string, startDate: string, endDate: string): Promise<ExpenseWithCategory[]> {\n    const userExpenses = Array.from(this.expenses.values())\n      .filter(expense => expense.userId === userId && expense.date >= startDate && expense.date <= endDate)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    return userExpenses.map(expense => ({\n      ...expense,\n      category: expense.categoryId ? this.categories.get(expense.categoryId) || null : null\n    }));\n  }\n\n  async createExpense(expense: InsertExpense & { userId: string }): Promise<Expense> {\n    const id = this.generateId();\n    const newExpense: Expense = {\n      id,\n      ...expense,\n      amount: typeof expense.amount === 'string' ? parseFloat(expense.amount) : expense.amount,\n      paymentMethod: expense.paymentMethod,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.expenses.set(id, newExpense);\n    return newExpense;\n  }\n\n  async updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense> {\n    const existing = this.expenses.get(id);\n    if (!existing) {\n      throw new Error('Expense not found');\n    }\n    const updated: Expense = {\n      ...existing,\n      ...expense,\n      amount: expense.amount ? (typeof expense.amount === 'string' ? parseFloat(expense.amount) : expense.amount) : existing.amount,\n      updatedAt: new Date()\n    };\n    this.expenses.set(id, updated);\n    return updated;\n  }\n\n  async deleteExpense(id: string): Promise<void> {\n    this.expenses.delete(id);\n  }\n\n  async getInsightsByUser(userId: string): Promise<Insight[]> {\n    return Array.from(this.insights.values())\n      .filter(insight => insight.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createInsight(insight: InsertInsight & { userId: string }): Promise<Insight> {\n    const id = this.generateId();\n    const newInsight: Insight = {\n      id,\n      ...insight,\n      createdAt: new Date()\n    };\n    this.insights.set(id, newInsight);\n    return newInsight;\n  }\n\n  async markInsightAsRead(id: string): Promise<void> {\n    const insight = this.insights.get(id);\n    if (insight) {\n      insight.isRead = \"true\";\n      this.insights.set(id, insight);\n    }\n  }\n\n  async clearUserInsights(userId: string): Promise<void> {\n    for (const [id, insight] of this.insights.entries()) {\n      if (insight.userId === userId) {\n        this.insights.delete(id);\n      }\n    }\n  }\n\n  async getBudgetsByUser(userId: string): Promise<Budget[]> {\n    return Array.from(this.budgets.values())\n      .filter(budget => budget.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createBudget(budget: InsertBudget & { userId: string }): Promise<Budget> {\n    const id = this.generateId();\n    const newBudget: Budget = {\n      id,\n      ...budget,\n      amount: typeof budget.amount === 'string' ? parseFloat(budget.amount) : budget.amount,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.budgets.set(id, newBudget);\n    return newBudget;\n  }\n\n  async deleteBudget(id: string): Promise<void> {\n    this.budgets.delete(id);\n  }\n\n  async getExpenseStats(userId: string, startDate: string, endDate: string): Promise<{\n    totalSpent: number;\n    categoryBreakdown: Array<{ categoryName: string; amount: number; color: string }>;\n    dailyTrend: Array<{ date: string; amount: number }>;\n  }> {\n    const expenses = await this.getExpensesByUserAndDateRange(userId, startDate, endDate);\n    \n    const totalSpent = expenses.reduce((sum, expense) => sum + expense.amount, 0);\n    \n    const categoryMap = new Map<string, { amount: number; name: string; color: string }>();\n    const dailyMap = new Map<string, number>();\n    \n    expenses.forEach(expense => {\n      // Category breakdown\n      const categoryName = expense.category?.name || 'Uncategorized';\n      const categoryColor = expense.category?.color || '#6b7280';\n      const categoryKey = expense.categoryId || 'uncategorized';\n      \n      if (categoryMap.has(categoryKey)) {\n        categoryMap.get(categoryKey)!.amount += expense.amount;\n      } else {\n        categoryMap.set(categoryKey, {\n          amount: expense.amount,\n          name: categoryName,\n          color: categoryColor\n        });\n      }\n      \n      // Daily trend\n      if (dailyMap.has(expense.date)) {\n        dailyMap.set(expense.date, dailyMap.get(expense.date)! + expense.amount);\n      } else {\n        dailyMap.set(expense.date, expense.amount);\n      }\n    });\n    \n    const categoryBreakdown = Array.from(categoryMap.values())\n      .map(cat => ({ categoryName: cat.name, amount: cat.amount, color: cat.color }))\n      .sort((a, b) => b.amount - a.amount);\n      \n    const dailyTrend = Array.from(dailyMap.entries())\n      .map(([date, amount]) => ({ date, amount }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n    \n    return {\n      totalSpent,\n      categoryBreakdown,\n      dailyTrend\n    };\n  }\n}\n\nexport class MongoStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    // Use memory store for sessions with fallback to MongoDB when available\n    try {\n      if (mongoose.connection.readyState === 1) {\n        this.sessionStore = MongoStore.create({\n          client: mongoose.connection.getClient(),\n          collectionName: 'sessions'\n        });\n      } else {\n        this.sessionStore = new MemoryStoreSession({\n          checkPeriod: 86400000 // prune expired entries every 24h\n        });\n      }\n    } catch (error) {\n      console.log('Using memory store for sessions');\n      this.sessionStore = new MemoryStoreSession({\n        checkPeriod: 86400000 // prune expired entries every 24h\n      });\n    }\n  }\n\n  // User operations for local authentication\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findById(id).lean();\n      return user ? this.transformUser(user) : undefined;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  private transformUser(user: any): User {\n    return {\n      id: user._id.toString(),\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      password: user.password,\n      profileImageUrl: user.profileImageUrl,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt\n    };\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    try {\n      const user = await UserModel.findOne({ username }).lean();\n      return user ? this.transformUser(user) : undefined;\n    } catch (error) {\n      console.error('Error getting user by username:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user = new UserModel(insertUser);\n    const savedUser = await user.save();\n    return this.transformUser(savedUser.toObject());\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const user = await UserModel.findOneAndUpdate(\n      { _id: userData.id || userData._id },\n      { ...userData, updatedAt: new Date() },\n      { upsert: true, new: true }\n    );\n    return this.transformUser(user!.toObject());\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    try {\n      const categories = await CategoryModel.find().sort({ name: 1 }).lean();\n      return categories.map(cat => this.transformCategory(cat));\n    } catch (error) {\n      console.log('Categories not available, returning empty array');\n      return [];\n    }\n  }\n\n  private transformCategory(cat: any): Category {\n    return {\n      id: cat._id.toString(),\n      name: cat.name,\n      color: cat.color,\n      icon: cat.icon,\n      createdAt: cat.createdAt\n    };\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const newCategory = new CategoryModel(category);\n    const savedCategory = await newCategory.save();\n    return this.transformCategory(savedCategory.toObject());\n  }\n\n  // Expense operations\n  async getExpensesByUser(userId: string, limit = 50): Promise<ExpenseWithCategory[]> {\n    const expenses = await ExpenseModel.find({ userId })\n      .sort({ date: -1, createdAt: -1 })\n      .limit(limit)\n      .lean();\n\n    const result: ExpenseWithCategory[] = [];\n    \n    for (const expense of expenses) {\n      let category = null;\n      if (expense.categoryId) {\n        const cat = await CategoryModel.findById(expense.categoryId).lean();\n        category = cat ? { ...cat, id: cat._id.toString() } : null;\n      }\n      \n      result.push({\n        ...expense,\n        id: expense._id.toString(),\n        category\n      });\n    }\n    \n    return result;\n  }\n\n  async getExpensesByUserAndDateRange(userId: string, startDate: string, endDate: string): Promise<ExpenseWithCategory[]> {\n    const expenses = await ExpenseModel.find({\n      userId,\n      date: { $gte: startDate, $lte: endDate }\n    }).sort({ date: -1, createdAt: -1 }).lean();\n\n    const result: ExpenseWithCategory[] = [];\n    \n    for (const expense of expenses) {\n      let category = null;\n      if (expense.categoryId) {\n        const cat = await CategoryModel.findById(expense.categoryId).lean();\n        category = cat ? { ...cat, id: cat._id.toString() } : null;\n      }\n      \n      result.push({\n        ...expense,\n        id: expense._id.toString(),\n        category\n      });\n    }\n    \n    return result;\n  }\n\n  async createExpense(expense: InsertExpense & { userId: string }): Promise<Expense> {\n    const newExpense = new ExpenseModel({\n      ...expense,\n      amount: parseFloat(expense.amount)\n    });\n    const savedExpense = await newExpense.save();\n    return { ...savedExpense.toObject(), id: savedExpense._id.toString() };\n  }\n\n  async updateExpense(id: string, expense: Partial<InsertExpense>): Promise<Expense> {\n    const updateData: any = { ...expense };\n    if (expense.amount) {\n      updateData.amount = parseFloat(expense.amount);\n    }\n    updateData.updatedAt = new Date();\n\n    const updatedExpense = await ExpenseModel.findByIdAndUpdate(\n      id,\n      updateData,\n      { new: true }\n    );\n    \n    if (!updatedExpense) {\n      throw new Error('Expense not found');\n    }\n    \n    return { ...updatedExpense.toObject(), id: updatedExpense._id.toString() };\n  }\n\n  async deleteExpense(id: string): Promise<void> {\n    await ExpenseModel.findByIdAndDelete(id);\n  }\n\n  // Insight operations\n  async getInsightsByUser(userId: string): Promise<Insight[]> {\n    const insights = await InsightModel.find({ userId })\n      .sort({ createdAt: -1 })\n      .lean();\n    return insights.map(insight => ({ ...insight, id: insight._id.toString() }));\n  }\n\n  async createInsight(insight: InsertInsight & { userId: string }): Promise<Insight> {\n    const newInsight = new InsightModel(insight);\n    const savedInsight = await newInsight.save();\n    return { ...savedInsight.toObject(), id: savedInsight._id.toString() };\n  }\n\n  async markInsightAsRead(id: string): Promise<void> {\n    await InsightModel.findByIdAndUpdate(id, { isRead: \"true\" });\n  }\n\n  async clearUserInsights(userId: string): Promise<void> {\n    await InsightModel.deleteMany({ userId });\n  }\n\n  // Budget operations\n  async getBudgetsByUser(userId: string): Promise<Budget[]> {\n    const budgets = await BudgetModel.find({ userId })\n      .sort({ createdAt: -1 })\n      .lean();\n    return budgets.map(budget => ({ ...budget, id: budget._id.toString() }));\n  }\n\n  async createBudget(budget: InsertBudget & { userId: string }): Promise<Budget> {\n    const newBudget = new BudgetModel({\n      ...budget,\n      amount: parseFloat(budget.amount)\n    });\n    const savedBudget = await newBudget.save();\n    return { ...savedBudget.toObject(), id: savedBudget._id.toString() };\n  }\n\n  async deleteBudget(id: string): Promise<void> {\n    await BudgetModel.findByIdAndDelete(id);\n  }\n\n  // Enhanced category operations\n  async deleteCategory(id: string): Promise<void> {\n    await CategoryModel.findByIdAndDelete(id);\n  }\n\n  // Analytics\n  async getExpenseStats(userId: string, startDate: string, endDate: string): Promise<{\n    totalSpent: number;\n    categoryBreakdown: Array<{ categoryName: string; amount: number; color: string }>;\n    dailyTrend: Array<{ date: string; amount: number }>;\n  }> {\n    // Get total spent\n    const totalResult = await ExpenseModel.aggregate([\n      {\n        $match: {\n          userId,\n          date: { $gte: startDate, $lte: endDate }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: \"$amount\" }\n        }\n      }\n    ]);\n\n    const totalSpent = totalResult[0]?.total || 0;\n\n    // Get category breakdown\n    const categoryResult = await ExpenseModel.aggregate([\n      {\n        $match: {\n          userId,\n          date: { $gte: startDate, $lte: endDate }\n        }\n      },\n      {\n        $group: {\n          _id: \"$categoryId\",\n          amount: { $sum: \"$amount\" }\n        }\n      },\n      {\n        $sort: { amount: -1 }\n      }\n    ]);\n\n    const categoryBreakdown = [];\n    for (const item of categoryResult) {\n      let categoryName = 'Uncategorized';\n      let color = '#6b7280';\n      \n      if (item._id) {\n        const category = await CategoryModel.findById(item._id).lean();\n        if (category) {\n          categoryName = category.name;\n          color = category.color;\n        }\n      }\n      \n      categoryBreakdown.push({\n        categoryName,\n        amount: item.amount,\n        color\n      });\n    }\n\n    // Get daily trend\n    const dailyResult = await ExpenseModel.aggregate([\n      {\n        $match: {\n          userId,\n          date: { $gte: startDate, $lte: endDate }\n        }\n      },\n      {\n        $group: {\n          _id: \"$date\",\n          amount: { $sum: \"$amount\" }\n        }\n      },\n      {\n        $sort: { _id: 1 }\n      }\n    ]);\n\n    const dailyTrend = dailyResult.map(item => ({\n      date: item._id,\n      amount: item.amount\n    }));\n\n    return {\n      totalSpent,\n      categoryBreakdown,\n      dailyTrend,\n    };\n  }\n}\n\n// Initialize storage based on database availability\nlet storage: IStorage;\n\n// Initialize storage - prefer MongoDB but fallback to memory\nconst initializeStorage = () => {\n  // Start with memory storage as safe default\n  storage = new MemStorage();\n  console.log('🚀 Starting with enhanced in-memory storage');\n  console.log('💡 To use MongoDB, set MONGODB_URI environment variable to your MongoDB connection string');\n  \n  // Try to upgrade to MongoDB when ready\n  const attemptMongoUpgrade = () => {\n    try {\n      if (mongoose.connection.readyState === 1) {\n        storage = new MongoStorage();\n        console.log('✅ Upgraded to MongoDB storage with persistent data');\n        return true;\n      }\n    } catch (error) {\n      console.log('⚠️  MongoDB upgrade failed, staying with memory storage');\n    }\n    return false;\n  };\n  \n  // Try immediate upgrade\n  setTimeout(attemptMongoUpgrade, 100);\n  \n  // Setup retry mechanism\n  const retryInterval = setInterval(() => {\n    if (attemptMongoUpgrade()) {\n      clearInterval(retryInterval);\n    }\n  }, 2000);\n  \n  // Stop retrying after 30 seconds\n  setTimeout(() => clearInterval(retryInterval), 30000);\n};\n\n// Initialize storage immediately\ninitializeStorage();\n\n// Listen for database connection events\nmongoose.connection.on('connected', () => {\n  if (!(storage instanceof MongoStorage)) {\n    storage = new MongoStorage();\n    console.log('✅ Upgraded to MongoDB storage');\n  }\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.log('⚠️  MongoDB disconnected, using memory storage');\n  if (!(storage instanceof MemStorage)) {\n    storage = new MemStorage();\n  }\n});\n\nexport { storage };","size_bytes":21439},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User interface\nexport interface User {\n  _id?: string;\n  id?: string;\n  username?: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  password?: string;\n  profileImageUrl?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n// Category interface\nexport interface Category {\n  _id?: string;\n  id?: string;\n  name: string;\n  color: string;\n  icon?: string;\n  createdAt?: Date;\n}\n\n// Expense interface\nexport interface Expense {\n  _id?: string;\n  id?: string;\n  userId: string;\n  categoryId?: string;\n  amount: number;\n  description: string;\n  paymentMethod: string;\n  date: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n// Expense with category populated\nexport interface ExpenseWithCategory extends Expense {\n  category?: Category | null;\n}\n\n// Insight interface\nexport interface Insight {\n  _id?: string;\n  id?: string;\n  userId: string;\n  type: string;\n  title: string;\n  description: string;\n  priority?: string;\n  isRead?: string;\n  createdAt?: Date;\n}\n\n// Budget interface\nexport interface Budget {\n  _id?: string;\n  id?: string;\n  userId: string;\n  categoryId?: string;\n  amount: number;\n  period: string;\n  startDate: string;\n  endDate: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n// Zod schemas for validation\nexport const insertExpenseSchema = z.object({\n  categoryId: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\"),\n  description: z.string().min(1, \"Description is required\").max(500),\n  paymentMethod: z.enum([\"cash\", \"credit_card\", \"debit_card\", \"upi\", \"bank_transfer\"]),\n  date: z.string().min(1, \"Date is required\"),\n});\n\nexport const insertCategorySchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  color: z.string().length(7, \"Color must be a valid hex color\"),\n  icon: z.string().max(50).optional(),\n});\n\nexport const insertInsightSchema = z.object({\n  type: z.string().min(1, \"Type is required\").max(50),\n  title: z.string().min(1, \"Title is required\").max(200),\n  description: z.string().min(1, \"Description is required\"),\n  priority: z.string().max(20).default(\"medium\"),\n  isRead: z.string().max(10).default(\"false\"),\n});\n\nexport const insertBudgetSchema = z.object({\n  categoryId: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\"),\n  period: z.string().default(\"monthly\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n});\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Invalid email\").optional(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  profileImageUrl: z.string().optional(),\n});\n\n// TypeScript types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = Partial<User>;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertInsight = z.infer<typeof insertInsightSchema>;\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;","size_bytes":3170},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AIInsightsPage from \"@/pages/ai-insights\";\nimport ReportsPage from \"@/pages/reports\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Debug logging to track authentication state\n  console.log(\"Router state:\", { isAuthenticated, isLoading, hasUser: !!user });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/auth\">\n        {isAuthenticated ? <Dashboard /> : <AuthPage />}\n      </Route>\n      <Route path=\"/ai-insights\">\n        {isAuthenticated ? <AIInsightsPage /> : <AuthPage />}\n      </Route>\n      <Route path=\"/reports\">\n        {isAuthenticated ? <ReportsPage /> : <AuthPage />}\n      </Route>\n      <Route path=\"/\">\n        {isAuthenticated ? <Dashboard /> : <Landing />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1780},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light Orange Finance Theme Colors */\n  --background: hsl(33, 100%, 98%);  /* Very light orange */\n  --foreground: hsl(220, 20%, 15%);  /* Dark navy for text */\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 20%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 20%, 15%);\n  --primary: hsl(24, 95%, 53%);      /* Vibrant orange */\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(33, 100%, 85%);   /* Light orange */\n  --secondary-foreground: hsl(220, 20%, 15%);\n  --muted: hsl(33, 50%, 95%);        /* Very light orange tint */\n  --muted-foreground: hsl(220, 15%, 45%);\n  --accent: hsl(45, 93%, 68%);       /* Complementary yellow */\n  --accent-foreground: hsl(220, 20%, 15%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(33, 30%, 88%);       /* Light orange border */\n  --input: hsl(33, 30%, 88%);\n  --ring: hsl(24, 95%, 53%);\n  --chart-1: hsl(24, 95%, 53%);      /* Orange */\n  --chart-2: hsl(33, 100%, 65%);     /* Light Orange */\n  --chart-3: hsl(45, 93%, 68%);      /* Yellow */\n  --chart-4: hsl(200, 71%, 52%);     /* Blue accent */\n  --chart-5: hsl(280, 65%, 60%);     /* Purple accent */\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(220, 20%, 15%);\n  --sidebar-primary: hsl(24, 95%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(33, 50%, 95%);\n  --sidebar-accent-foreground: hsl(24, 95%, 53%);\n  --sidebar-border: hsl(33, 30%, 88%);\n  --sidebar-ring: hsl(24, 95%, 53%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  /* Dark Finance Theme */\n  --background: hsl(210, 20%, 6%);\n  --foreground: hsl(120, 25%, 95%);\n  --card: hsl(210, 20%, 8%);\n  --card-foreground: hsl(120, 25%, 95%);\n  --popover: hsl(210, 20%, 8%);\n  --popover-foreground: hsl(120, 25%, 95%);\n  --primary: hsl(142, 76%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(197, 71%, 52%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 20%, 12%);\n  --muted-foreground: hsl(120, 15%, 65%);\n  --accent: hsl(45, 93%, 68%);\n  --accent-foreground: hsl(210, 20%, 15%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 20%, 15%);\n  --input: hsl(210, 20%, 15%);\n  --ring: hsl(142, 76%, 45%);\n  --sidebar: hsl(210, 20%, 8%);\n  --sidebar-foreground: hsl(120, 25%, 95%);\n  --sidebar-primary: hsl(142, 76%, 45%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 20%, 12%);\n  --sidebar-accent-foreground: hsl(142, 76%, 45%);\n  --sidebar-border: hsl(210, 20%, 15%);\n  --sidebar-ring: hsl(142, 76%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for financial dashboard */\n.expense-card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow;\n}\n\n.category-badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.stat-card {\n  @apply bg-white overflow-hidden shadow rounded-lg;\n}\n\n.insight-card {\n  @apply flex items-start space-x-3 p-4 rounded-lg border;\n}\n\n/* Chart container styles */\n.chart-container {\n  @apply h-64 w-full;\n}\n\n/* Animation for loading states */\n.loading-skeleton {\n  @apply animate-pulse bg-gray-200 rounded;\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground));\n}\n","size_bytes":3969},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ai-insights.tsx":{"content":"\"use client\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info, CheckCircle, AlertTriangle, Lightbulb, RefreshCw } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst getInsightIcon = (type: string) => {\n  switch (type) {\n    case \"alert\":\n      return <Info className=\"w-5 h-5 text-blue-600\" />;\n    case \"goal\":\n      return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n    case \"warning\":\n      return <AlertTriangle className=\"w-5 h-5 text-amber-600\" />;\n    case \"recommendation\":\n      return <Lightbulb className=\"w-5 h-5 text-purple-600\" />;\n    default:\n      return <Info className=\"w-5 h-5 text-blue-600\" />;\n  }\n};\n\nconst getInsightColor = (type: string, priority: string) => {\n  if (priority === \"high\") {\n    switch (type) {\n      case \"alert\":\n        return \"bg-red-50 border-red-300 text-red-900\";\n      case \"warning\":\n        return \"bg-orange-50 border-orange-300 text-orange-900\";\n      default:\n        return \"bg-red-50 border-red-300 text-red-900\";\n    }\n  }\n\n  switch (type) {\n    case \"alert\":\n      return \"bg-red-50 border-red-200 text-red-800\";\n    case \"goal\":\n      return \"bg-green-50 border-green-200 text-green-800\";\n    case \"warning\":\n      return \"bg-amber-50 border-amber-200 text-amber-800\";\n    case \"recommendation\":\n      return \"bg-blue-50 border-blue-200 text-blue-800\";\n    default:\n      return \"bg-gray-50 border-gray-200 text-gray-800\";\n  }\n};\n\nexport function AIInsights() {\n  const { toast } = useToast();\n  const [customInsights, setCustomInsights] = useState<any>(null);\n\n  const { data: insights, isLoading } = useQuery({\n    queryKey: [\"/api/insights\"],\n    retry: false,\n  });\n\n  const generateInsightsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/insights/generate\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/insights\"] });\n      toast({\n        title: \"New Insights Generated\",\n        description:\n          \"AI has analyzed your spending and generated new recommendations.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate new insights. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markInsightReadMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PUT\", `/api/insights/${id}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/insights\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const handleGenerateInsights = () => {\n    generateInsightsMutation.mutate();\n  };\n\n  const handleMarkAsRead = (id: string) => {\n    markInsightReadMutation.mutate(id);\n  };\n\n  // 🔹 New: Fetch custom range insights\n  const handleCustomInsights = async () => {\n    try {\n      const res = await apiRequest(\"POST\", \"/api/insights/custom\", {\n        start: \"2025-08-01\",\n        end: \"2025-08-31\",\n      });\n      setCustomInsights(res);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch custom insights.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white shadow animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white shadow\" data-testid=\"card-ai-insights\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Lightbulb className=\"h-5 w-5 text-amber-500\" />\n            <span>AI Insights</span>\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleGenerateInsights}\n              disabled={generateInsightsMutation.isPending}\n              data-testid=\"button-generate-insights\"\n            >\n              <RefreshCw\n                className={`h-4 w-4 mr-2 ${\n                  generateInsightsMutation.isPending ? \"animate-spin\" : \"\"\n                }`}\n              />\n              {generateInsightsMutation.isPending ? \"Generating...\" : \"Generate\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleCustomInsights}\n              data-testid=\"button-custom-insights\"\n            >\n              Custom Range\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* 🔹 Default saved insights */}\n        {(insights as any) && (insights as any).length > 0 ? (\n          <div className=\"space-y-4\" data-testid=\"insights-list\">\n            {(insights as any)\n              .sort((a: any, b: any) => {\n                const priorityOrder = { high: 3, medium: 2, low: 1 };\n                return (\n                  (priorityOrder[b.priority as keyof typeof priorityOrder] || 0) -\n                  (priorityOrder[a.priority as keyof typeof priorityOrder] || 0)\n                );\n              })\n              .map((insight: any) => (\n                <div\n                  key={insight.id}\n                  className={`p-4 rounded-lg border ${getInsightColor(\n                    insight.type,\n                    insight.priority\n                  )} transition-all hover:shadow-md`}\n                  data-testid={`insight-${insight.id}`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getInsightIcon(insight.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h4\n                        className=\"text-sm font-medium mb-1\"\n                        data-testid={`insight-title-${insight.id}`}\n                      >\n                        {insight.title}\n                      </h4>\n                      <p\n                        className=\"text-sm opacity-90 leading-relaxed\"\n                        data-testid={`insight-message-${insight.id}`}\n                      >\n                        {insight.description || insight.message}\n                      </p>\n                      <div className=\"flex items-center justify-between mt-3\">\n                        <span className=\"text-xs text-gray-600\">\n                          {insight.priority === \"high\" && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                              High Priority\n                            </span>\n                          )}\n                          {insight.priority === \"medium\" && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                              Medium Priority\n                            </span>\n                          )}\n                          {insight.priority === \"low\" && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                              Low Priority\n                            </span>\n                          )}\n                        </span>\n                        {insight.isRead === \"false\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleMarkAsRead(insight.id)}\n                            className=\"text-xs\"\n                            data-testid={`button-mark-read-${insight.id}`}\n                          >\n                            Mark as Read\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Lightbulb className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              No insights yet\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Add some expenses to get AI-powered insights and recommendations.\n            </p>\n            <div className=\"mt-6\">\n              <Button\n                onClick={handleGenerateInsights}\n                disabled={generateInsightsMutation.isPending}\n                data-testid=\"button-generate-first-insights\"\n              >\n                <RefreshCw\n                  className={`h-4 w-4 mr-2 ${\n                    generateInsightsMutation.isPending ? \"animate-spin\" : \"\"\n                  }`}\n                />\n                Generate First Insights\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* 🔹 Custom insights result */}\n        {customInsights && (\n          <div className=\"mt-6 border-t pt-4\">\n            <h3 className=\"font-bold text-lg\">Custom Insights (Aug 2025)</h3>\n            <p className=\"mt-2 text-sm text-gray-700\">\n              <strong>Recommendations:</strong> {customInsights.recommendations}\n            </p>\n            <p className=\"mt-2 text-sm text-gray-700\">\n              <strong>Savings Tips:</strong> {customInsights.savingsTips}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10762},"client/src/components/budget-settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertBudgetSchema, type InsertBudget } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, Target, Calendar } from \"lucide-react\";\n\ninterface BudgetSettingsProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function BudgetSettings({ open, onClose }: BudgetSettingsProps) {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [editingBudget, setEditingBudget] = useState<any>(null);\n\n  const form = useForm<InsertBudget>({\n    resolver: zodResolver(insertBudgetSchema),\n    defaultValues: {\n      categoryId: \"\",\n      amount: \"\",\n      period: \"monthly\",\n      startDate: new Date().toISOString().split('T')[0],\n      endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0],\n    },\n  });\n\n  const { data: budgets, isLoading } = useQuery({\n    queryKey: ['/api/budgets'],\n    retry: false,\n    enabled: open,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: ['/api/categories'],\n    retry: false,\n    enabled: open,\n  });\n\n  const createBudgetMutation = useMutation({\n    mutationFn: async (data: InsertBudget) => {\n      return await apiRequest(\"POST\", \"/api/budgets\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/budgets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/stats'] });\n      toast({\n        title: \"Budget Created\",\n        description: \"Your budget has been successfully set.\",\n      });\n      form.reset();\n      setShowForm(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create budget. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBudgetMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/budgets/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/budgets'] });\n      toast({\n        title: \"Budget Deleted\",\n        description: \"Budget has been removed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete budget. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = (categories as any)?.find((cat: any) => cat.id === categoryId);\n    return category?.name || 'All Categories';\n  };\n\n  const onSubmit = (data: InsertBudget) => {\n    createBudgetMutation.mutate(data);\n  };\n\n  const handleEdit = (budget: any) => {\n    setEditingBudget(budget);\n    form.reset({\n      categoryId: budget.categoryId || \"\",\n      amount: budget.amount,\n      period: budget.period,\n      startDate: budget.startDate,\n      endDate: budget.endDate,\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this budget?')) {\n      deleteBudgetMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    setEditingBudget(null);\n    form.reset();\n    setShowForm(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-budget-settings\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Target className=\"h-5 w-5\" />\n            <span>Budget Settings</span>\n          </DialogTitle>\n          <DialogDescription>\n            Set spending limits for different categories to track your financial goals.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Add Budget Button */}\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">Your Budgets</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              data-testid=\"button-add-budget\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Budget\n            </Button>\n          </div>\n\n          {/* Budget List */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\" data-testid=\"budgets-list\">\n              {(budgets as any) && (budgets as any).length > 0 ? (\n                (budgets as any).map((budget: any) => (\n                  <Card key={budget.id} className=\"relative\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"text-base\" data-testid={`budget-category-${budget.id}`}>\n                            {getCategoryName(budget.categoryId)}\n                          </CardTitle>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              {budget.period}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(budget)}\n                            data-testid={`button-edit-budget-${budget.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(budget.id)}\n                            data-testid={`button-delete-budget-${budget.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Budget</span>\n                          <span className=\"font-medium\" data-testid={`budget-amount-${budget.id}`}>\n                            {formatCurrency(budget.amount)}\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {budget.startDate} to {budget.endDate}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <div className=\"col-span-2 text-center py-8\">\n                  <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No budgets set</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Start by creating your first budget to track spending.\n                  </p>\n                  <Button onClick={() => setShowForm(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create First Budget\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Budget Form */}\n          {showForm && (\n            <Card className=\"border-2 border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  {editingBudget ? 'Edit Budget' : 'Create New Budget'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Category */}\n                    <div>\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select \n                        value={form.watch('categoryId') || ''} \n                        onValueChange={(value) => form.setValue('categoryId', value)}\n                      >\n                        <SelectTrigger data-testid=\"select-budget-category\">\n                          <SelectValue placeholder=\"Select category (optional)\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Categories</SelectItem>\n                          {(categories as any)?.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"text-sm\">{category.icon}</span>\n                                <span>{category.name}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Amount */}\n                    <div>\n                      <Label htmlFor=\"amount\">Budget Amount *</Label>\n                      <div className=\"relative\">\n                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                          <span className=\"text-gray-500 text-sm\">₹</span>\n                        </div>\n                        <Input\n                          id=\"amount\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"5000.00\"\n                          className=\"pl-7\"\n                          {...form.register('amount')}\n                          data-testid=\"input-budget-amount\"\n                        />\n                      </div>\n                      {form.formState.errors.amount && (\n                        <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.amount.message}</p>\n                      )}\n                    </div>\n\n                    {/* Period */}\n                    <div>\n                      <Label htmlFor=\"period\">Period *</Label>\n                      <Select \n                        value={form.watch('period')} \n                        onValueChange={(value) => form.setValue('period', value as any)}\n                      >\n                        <SelectTrigger data-testid=\"select-budget-period\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {form.formState.errors.period && (\n                        <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.period.message}</p>\n                      )}\n                    </div>\n\n                    {/* Start Date */}\n                    <div>\n                      <Label htmlFor=\"startDate\">Start Date *</Label>\n                      <Input\n                        id=\"startDate\"\n                        type=\"date\"\n                        {...form.register('startDate')}\n                        data-testid=\"input-budget-start-date\"\n                      />\n                      {form.formState.errors.startDate && (\n                        <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.startDate.message}</p>\n                      )}\n                    </div>\n\n                    {/* End Date */}\n                    <div>\n                      <Label htmlFor=\"endDate\">End Date *</Label>\n                      <Input\n                        id=\"endDate\"\n                        type=\"date\"\n                        {...form.register('endDate')}\n                        data-testid=\"input-budget-end-date\"\n                      />\n                      {form.formState.errors.endDate && (\n                        <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.endDate.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Form Buttons */}\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button \n                      type=\"submit\" \n                      disabled={createBudgetMutation.isPending}\n                      data-testid=\"button-submit-budget\"\n                    >\n                      {editingBudget ? 'Update Budget' : 'Create Budget'}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={resetForm}\n                      data-testid=\"button-cancel-budget\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15138},"client/src/components/categories-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertCategorySchema, type InsertCategory } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, Tag, Palette } from \"lucide-react\";\n\ninterface CategoriesManagerProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst PRESET_COLORS = [\n  \"#ef4444\", \"#f97316\", \"#f59e0b\", \"#eab308\", \n  \"#84cc16\", \"#22c55e\", \"#10b981\", \"#14b8a6\",\n  \"#06b6d4\", \"#3b82f6\", \"#6366f1\", \"#8b5cf6\",\n  \"#a855f7\", \"#d946ef\", \"#ec4899\", \"#f43f5e\"\n];\n\nconst PRESET_ICONS = [\n  \"🍽️\", \"🚗\", \"🛍️\", \"🎬\", \"📱\", \"🏥\", \"📚\", \"✈️\",\n  \"💰\", \"🏠\", \"⚡\", \"🎮\", \"👕\", \"☕\", \"🎵\", \"💊\"\n];\n\nexport function CategoriesManager({ open, onClose }: CategoriesManagerProps) {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      color: PRESET_COLORS[0],\n      icon: PRESET_ICONS[0],\n    },\n  });\n\n  const { data: categories, isLoading } = useQuery({\n    queryKey: ['/api/categories'],\n    retry: false,\n    enabled: open,\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      return await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: \"Category Created\",\n        description: \"New category has been added successfully.\",\n      });\n      form.reset();\n      setShowForm(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({\n        title: \"Category Deleted\",\n        description: \"Category has been removed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete category. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertCategory) => {\n    createCategoryMutation.mutate(data);\n  };\n\n  const handleEdit = (category: any) => {\n    setEditingCategory(category);\n    form.reset({\n      name: category.name,\n      color: category.color,\n      icon: category.icon,\n    });\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this category? This action cannot be undone.')) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  const resetForm = () => {\n    setEditingCategory(null);\n    form.reset();\n    setShowForm(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-categories-manager\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Tag className=\"h-5 w-5\" />\n            <span>Manage Categories</span>\n          </DialogTitle>\n          <DialogDescription>\n            Create and organize expense categories to better track your spending.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Add Category Button */}\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">Your Categories</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              data-testid=\"button-add-category\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Category\n            </Button>\n          </div>\n\n          {/* Categories Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {[...Array(8)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"h-16 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\" data-testid=\"categories-grid\">\n              {(categories as any)?.map((category: any) => (\n                <Card key={category.id} className=\"relative group hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <div \n                        className=\"w-12 h-12 rounded-full flex items-center justify-center text-xl\"\n                        style={{ backgroundColor: `${category.color}20`, color: category.color }}\n                      >\n                        {category.icon}\n                      </div>\n                      <h4 className=\"font-medium text-center text-sm\" data-testid={`category-name-${category.id}`}>\n                        {category.name}\n                      </h4>\n                      <Badge \n                        variant=\"outline\" \n                        className=\"text-xs\"\n                        style={{ borderColor: category.color, color: category.color }}\n                      >\n                        {category.color}\n                      </Badge>\n                    </div>\n                    \n                    {/* Action Buttons - Show on Hover */}\n                    <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0\"\n                        onClick={() => handleEdit(category)}\n                        data-testid={`button-edit-category-${category.id}`}\n                      >\n                        <Edit className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-8 w-8 p-0\"\n                        onClick={() => handleDelete(category.id)}\n                        data-testid={`button-delete-category-${category.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3 text-red-500\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Category Form */}\n          {showForm && (\n            <Card className=\"border-2 border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">\n                  {editingCategory ? 'Edit Category' : 'Create New Category'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  {/* Category Name */}\n                  <div>\n                    <Label htmlFor=\"name\">Category Name *</Label>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"e.g., Groceries, Entertainment\"\n                      {...form.register('name')}\n                      data-testid=\"input-category-name\"\n                    />\n                    {form.formState.errors.name && (\n                      <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.name.message}</p>\n                    )}\n                  </div>\n\n                  {/* Icon Selection */}\n                  <div>\n                    <Label htmlFor=\"icon\">Icon</Label>\n                    <div className=\"grid grid-cols-8 gap-2 mt-2\">\n                      {PRESET_ICONS.map((icon) => (\n                        <button\n                          key={icon}\n                          type=\"button\"\n                          className={`p-2 text-xl border rounded hover:bg-gray-50 transition-colors ${\n                            form.watch('icon') === icon ? 'border-primary bg-primary/10' : 'border-gray-200'\n                          }`}\n                          onClick={() => form.setValue('icon', icon)}\n                          data-testid={`button-icon-${icon}`}\n                        >\n                          {icon}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Color Selection */}\n                  <div>\n                    <Label htmlFor=\"color\">Color</Label>\n                    <div className=\"grid grid-cols-8 gap-2 mt-2\">\n                      {PRESET_COLORS.map((color) => (\n                        <button\n                          key={color}\n                          type=\"button\"\n                          className={`w-8 h-8 rounded border-2 transition-all ${\n                            form.watch('color') === color ? 'border-gray-800 scale-110' : 'border-gray-300'\n                          }`}\n                          style={{ backgroundColor: color }}\n                          onClick={() => form.setValue('color', color)}\n                          data-testid={`button-color-${color}`}\n                        />\n                      ))}\n                    </div>\n                    <Input\n                      type=\"color\"\n                      value={form.watch('color')}\n                      onChange={(e) => form.setValue('color', e.target.value)}\n                      className=\"w-20 h-8 mt-2\"\n                      data-testid=\"input-custom-color\"\n                    />\n                  </div>\n\n                  {/* Preview */}\n                  <div className=\"p-4 border rounded-lg bg-gray-50\">\n                    <Label className=\"text-sm font-medium text-gray-700\">Preview</Label>\n                    <div className=\"flex items-center space-x-3 mt-2\">\n                      <div \n                        className=\"w-10 h-10 rounded-full flex items-center justify-center text-lg\"\n                        style={{ \n                          backgroundColor: `${form.watch('color')}20`, \n                          color: form.watch('color') \n                        }}\n                      >\n                        {form.watch('icon')}\n                      </div>\n                      <span className=\"font-medium\">{form.watch('name') || 'Category Name'}</span>\n                    </div>\n                  </div>\n\n                  {/* Form Buttons */}\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button \n                      type=\"submit\" \n                      disabled={createCategoryMutation.isPending}\n                      data-testid=\"button-submit-category\"\n                    >\n                      {editingCategory ? 'Update Category' : 'Create Category'}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={resetForm}\n                      data-testid=\"button-cancel-category\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12705},"client/src/components/expense-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useMemo } from \"react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nexport function ExpenseChart() {\n  const { toast } = useToast();\n  const [period, setPeriod] = useState(\"30\");\n\n  // Memoize date range calculation to prevent unnecessary API calls\n  const dateRange = useMemo(() => {\n    const days = parseInt(period);\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    return {\n      startDate: startDate.toISOString().split('T')[0],\n      endDate: endDate.toISOString().split('T')[0],\n    };\n  }, [period]);\n\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: ['/api/analytics/stats', dateRange],\n    queryFn: async () => {\n      const response = await fetch('/api/analytics/stats');\n      if (!response.ok) {\n        throw new Error('Failed to fetch stats');\n      }\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const { data: financeNews, isLoading: newsLoading } = useQuery({\n    queryKey: ['/api/finance-news'],\n    queryFn: async () => {\n      const response = await fetch('/api/finance-news');\n      if (!response.ok) {\n        throw new Error('Failed to fetch finance news');\n      }\n      return response.json();\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Memoize currency formatter - MOVED BEFORE EARLY RETURNS\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    });\n    return (value: number) => formatter.format(value);\n  }, []);\n\n  // Memoize chart data to prevent unnecessary re-renders - MOVED BEFORE EARLY RETURNS\n  const categoryData = useMemo(() => {\n    const data = (stats as any)?.categoryBreakdown?.map((cat: any) => ({\n      name: cat.categoryName,\n      value: cat.amount,\n      color: cat.color,\n    })) || [];\n    \n    return data;\n  }, [stats]);\n\n  // Color palette for pie chart\n  const COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n\n  if (isLoading || newsLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-2\">\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </CardContent>\n        </Card>\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleNewsClick = (newsItem: any) => {\n    // Open news article in new tab/window\n    if (newsItem.url) {\n      window.open(newsItem.url, '_blank');\n    }\n  };\n\n  return (\n    <>\n      {/* Finance News Feed */}\n      <Card className=\"bg-white shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-6\">\n          <CardTitle className=\"text-lg font-medium text-gray-900\">📈 Finance News</CardTitle>\n          <span className=\"text-sm text-gray-500\">Latest Updates</span>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 overflow-y-auto space-y-3\" data-testid=\"finance-news-feed\">\n            {(financeNews as any) && (financeNews as any).length > 0 ? (\n              (financeNews as any).map((newsItem: any, index: number) => (\n                <div \n                  key={index}\n                  className=\"p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\"\n                  onClick={() => handleNewsClick(newsItem)}\n                  data-testid={`news-item-${index}`}\n                >\n                  <h4 className=\"font-medium text-sm text-gray-900 mb-1 line-clamp-2\">\n                    {newsItem.title}\n                  </h4>\n                  <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n                    {newsItem.description}\n                  </p>\n                  <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                    <span className=\"font-medium\">{newsItem.source}</span>\n                    <span>{newsItem.publishedAt}</span>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium\">📰 Finance news loading...</p>\n                  <p className=\"text-xs\">Stay updated with latest market trends</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Category Breakdown Chart */}\n      <Card className=\"bg-white shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-6\">\n          <CardTitle className=\"text-lg font-medium text-gray-900\">💰 Spending Breakdown</CardTitle>\n          <Select value={period} onValueChange={setPeriod}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-category-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64\" data-testid=\"chart-category-breakdown\">\n            {categoryData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={categoryData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={70}\n                    innerRadius={30}\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                    labelLine={false}\n                  >\n                    {categoryData.map((entry: any, index: number) => (\n                      <Cell \n                        key={`category-cell-${entry.name}-${index}`} \n                        fill={entry.color || COLORS[index % COLORS.length]} \n                      />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                    labelFormatter={(label) => `Category: ${label}`}\n                  />\n                  <Legend \n                    verticalAlign=\"bottom\" \n                    height={36}\n                    formatter={(value) => (\n                      <span className=\"text-xs\">{value}</span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex items-center justify-center h-full text-gray-500\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-medium\">📊 No expenses yet</p>\n                  <p className=\"text-sm\">Add your first expense to see the breakdown</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","size_bytes":7963},"client/src/components/expense-form.tsx":{"content":"import React, { useState, useCallback, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertExpenseSchema, type InsertExpense } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Loader2, Sparkles } from \"lucide-react\";\n\ninterface ExpenseFormProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function ExpenseForm({ open, onClose }: ExpenseFormProps) {\n  const { toast } = useToast();\n  const [isAICategorizing, setIsAICategorizing] = useState(false);\n\n  const form = useForm<InsertExpense>({\n    resolver: zodResolver(insertExpenseSchema),\n    defaultValues: {\n      amount: \"\",\n      description: \"\",\n      categoryId: \"\",\n      paymentMethod: \"cash\",\n      date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: ['/api/categories'],\n    retry: false,\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: InsertExpense) => {\n      return await apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/insights'] });\n      toast({\n        title: \"Expense Added\",\n        description: \"Your expense has been successfully recorded. AI will analyze your spending patterns.\",\n      });\n      form.reset();\n      onClose();\n      \n      // Auto-generate insights after adding expense (with slight delay to allow DB update)\n      setTimeout(() => {\n        fetch('/api/insights/generate', { \n          method: 'POST',\n          credentials: 'include'\n        }).catch(err => console.log('Auto-insight generation failed:', err));\n      }, 1000);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add expense. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categorizeMutation = useMutation({\n    mutationFn: async ({ description, amount }: { description: string; amount: number }) => {\n      return await apiRequest(\"POST\", \"/api/ai/categorize\", { description, amount });\n    },\n    onSuccess: (data: any) => {\n      if (data.suggestedCategoryId) {\n        form.setValue('categoryId', data.suggestedCategoryId);\n        toast({\n          title: \"AI Suggestion\",\n          description: `Suggested category: ${data.suggestedCategoryName} (${Math.round(data.confidence * 100)}% confidence)`,\n        });\n      }\n      setIsAICategorizing(false);\n    },\n    onError: (error: Error) => {\n      console.error('AI categorization failed:', error);\n      setIsAICategorizing(false);\n    },\n  });\n\n  const handleAICategorization = async () => {\n    const description = form.getValues('description');\n    const amount = parseFloat(form.getValues('amount'));\n    \n    if (!description.trim()) {\n      toast({\n        title: \"Description Required\",\n        description: \"Please enter a description to use AI categorization.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Amount Required\",\n        description: \"Please enter a valid amount for better AI categorization.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAICategorizing(true);\n    categorizeMutation.mutate({ description, amount });\n  };\n\n  // Auto-trigger AI categorization when both description and amount are present\n  const watchDescription = form.watch('description');\n  const watchAmount = form.watch('amount');\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Stable function to avoid useEffect dependency issues\n  const triggerAutoCategorization = useCallback((description: string, amount: number) => {\n    setIsAICategorizing(true);\n    categorizeMutation.mutate({ description, amount });\n  }, [categorizeMutation]);\n  \n  React.useEffect(() => {\n    // Clear existing timeout\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    const description = watchDescription?.trim();\n    const amount = parseFloat(watchAmount || '0');\n    \n    // Auto-categorize if we have good description and amount, but no category selected yet\n    if (description && description.length > 3 && amount > 0 && !form.getValues('categoryId') && !isAICategorizing) {\n      timeoutRef.current = setTimeout(() => {\n        triggerAutoCategorization(description, amount);\n      }, 1500); // Delay to avoid too many API calls while typing\n    }\n    \n    // Cleanup function\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [watchDescription, watchAmount, isAICategorizing, triggerAutoCategorization]);\n\n  const onSubmit = (data: InsertExpense) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"modal-add-expense\">\n        <DialogHeader>\n          <DialogTitle>Add New Expense</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Amount */}\n          <div>\n            <Label htmlFor=\"amount\">Amount *</Label>\n            <div className=\"mt-1 relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <span className=\"text-gray-500 text-sm\">₹</span>\n              </div>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                className=\"pl-7\"\n                {...form.register('amount')}\n                data-testid=\"input-amount\"\n              />\n            </div>\n            {form.formState.errors.amount && (\n              <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.amount.message}</p>\n            )}\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Description *</Label>\n            <div className=\"mt-1 flex space-x-2\">\n              <Input\n                id=\"description\"\n                placeholder=\"e.g., Starbucks Coffee\"\n                {...form.register('description')}\n                data-testid=\"input-description\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleAICategorization}\n                disabled={isAICategorizing || categorizeMutation.isPending}\n                data-testid=\"button-ai-categorize\"\n              >\n                {isAICategorizing ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Sparkles className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">AI will automatically suggest a category</p>\n            {form.formState.errors.description && (\n              <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n\n          {/* Category */}\n          <div>\n            <Label htmlFor=\"category\">Category</Label>\n            <Select value={form.watch('categoryId') || ''} onValueChange={(value) => form.setValue('categoryId', value)}>\n              <SelectTrigger data-testid=\"select-category\">\n                <SelectValue placeholder=\"Select or let AI suggest...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(categories as any)?.map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm\">{category.icon}</span>\n                      <span>{category.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Payment Method */}\n          <div>\n            <Label htmlFor=\"paymentMethod\">Payment Method *</Label>\n            <Select value={form.watch('paymentMethod')} onValueChange={(value) => form.setValue('paymentMethod', value as any)}>\n              <SelectTrigger data-testid=\"select-payment-method\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"credit_card\">Credit Card</SelectItem>\n                <SelectItem value=\"debit_card\">Debit Card</SelectItem>\n                <SelectItem value=\"upi\">UPI</SelectItem>\n                <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n              </SelectContent>\n            </Select>\n            {form.formState.errors.paymentMethod && (\n              <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.paymentMethod.message}</p>\n            )}\n          </div>\n\n          {/* Date */}\n          <div>\n            <Label htmlFor=\"date\">Date *</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              {...form.register('date')}\n              data-testid=\"input-date\"\n            />\n            {form.formState.errors.date && (\n              <p className=\"text-red-500 text-xs mt-1\">{form.formState.errors.date.message}</p>\n            )}\n          </div>\n\n          {/* Buttons */}\n          <div className=\"flex space-x-2 pt-4\">\n            <Button \n              type=\"submit\" \n              disabled={createExpenseMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-submit-expense\"\n            >\n              {createExpenseMutation.isPending ? (\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              ) : null}\n              Add Expense\n            </Button>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"button-cancel-expense\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11189},"client/src/components/recent-expenses.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useMemo } from \"react\";\n\n// Memoized category helper functions to prevent recreation on every render\nconst getCategoryIcon = (categoryName: string): string => {\n  const name = categoryName?.toLowerCase() || '';\n  if (name.includes('food') || name.includes('dining')) return '🍽️';\n  if (name.includes('transport')) return '🚗';\n  if (name.includes('shopping')) return '🛍️';\n  if (name.includes('entertainment')) return '🎬';\n  if (name.includes('bills') || name.includes('utilities')) return '📱';\n  if (name.includes('healthcare')) return '🏥';\n  if (name.includes('education')) return '📚';\n  if (name.includes('travel')) return '✈️';\n  return '💰';\n};\n\nconst getCategoryColor = (categoryName: string): string => {\n  const name = categoryName?.toLowerCase() || '';\n  if (name.includes('food') || name.includes('dining')) return 'bg-red-100 text-red-800';\n  if (name.includes('transport')) return 'bg-blue-100 text-blue-800';\n  if (name.includes('shopping')) return 'bg-green-100 text-green-800';\n  if (name.includes('entertainment')) return 'bg-amber-100 text-amber-800';\n  if (name.includes('bills') || name.includes('utilities')) return 'bg-purple-100 text-purple-800';\n  if (name.includes('healthcare')) return 'bg-pink-100 text-pink-800';\n  if (name.includes('education')) return 'bg-cyan-100 text-cyan-800';\n  if (name.includes('travel')) return 'bg-lime-100 text-lime-800';\n  return 'bg-gray-100 text-gray-800';\n};\n\nexport function RecentExpenses() {\n  const { toast } = useToast();\n\n  const { data: expenses, isLoading } = useQuery({\n    queryKey: ['/api/expenses', { limit: 10 }],\n    retry: false,\n  });\n\n  // Memoize formatters to prevent recreation on every render\n  const { formatCurrency, formatPaymentMethod } = useMemo(() => {\n    const currencyFormatter = new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    });\n    \n    const paymentMethods: Record<string, string> = {\n      cash: 'Cash',\n      credit_card: 'Credit Card',\n      debit_card: 'Debit Card',\n      upi: 'UPI',\n      bank_transfer: 'Bank Transfer',\n    };\n    \n    return {\n      formatCurrency: (amount: string) => currencyFormatter.format(parseFloat(amount)),\n      formatPaymentMethod: (method: string) => paymentMethods[method] || method\n    };\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white shadow animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"divide-y divide-gray-200\">\n            {[...Array(5)].map((_, i) => (\n              <div key={`expense-skeleton-${i}`} className=\"py-4\">\n                <div className=\"h-16 bg-gray-200 rounded\" aria-label=\"Loading expense item\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white shadow\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n        <CardTitle className=\"text-lg font-medium text-gray-900\">Recent Expenses</CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-expenses\">\n          View All\n        </Button>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {(expenses as any) && (expenses as any).length > 0 ? (\n          <div className=\"divide-y divide-gray-200\" data-testid=\"expenses-list\" role=\"list\" aria-label=\"Recent expenses list\">\n            {(expenses as any).map((expense: any) => (\n              <div \n                key={`expense-${expense.id}`} \n                className=\"px-6 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors\"\n                data-testid={`expense-item-${expense.id}`}\n                role=\"listitem\"\n                aria-label={`Expense: ${expense.description}, Amount: ${formatCurrency(expense.amount)}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center text-lg\"\n                    aria-label={`Category: ${expense.category?.name || 'Uncategorized'}`}\n                  >\n                    {getCategoryIcon(expense.category?.name)}\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\" data-testid={`expense-description-${expense.id}`}>\n                      {expense.description}\n                    </p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge \n                        variant=\"secondary\" \n                        className={getCategoryColor(expense.category?.name)}\n                        data-testid={`expense-category-${expense.id}`}\n                      >\n                        {expense.category?.name || 'Uncategorized'}\n                      </Badge>\n                      <span className=\"text-xs text-gray-500\" data-testid={`expense-payment-${expense.id}`}>\n                        {formatPaymentMethod(expense.paymentMethod)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-gray-900\" data-testid={`expense-amount-${expense.id}`}>\n                    {formatCurrency(expense.amount)}\n                  </p>\n                  <p className=\"text-xs text-gray-500\" data-testid={`expense-date-${expense.id}`}>\n                    {formatDistanceToNow(new Date(expense.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 px-6\">\n            <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl\">💰</span>\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No expenses yet</h3>\n            <p className=\"text-gray-600\">\n              Start tracking your expenses to see them here.\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6684},"client/src/components/reports-export.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, FileText, Calendar, Filter, TrendingUp } from \"lucide-react\";\nimport { PDFExport } from \"./pdf-export\";\n\ninterface ReportsExportProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function ReportsExport({ open, onClose }: ReportsExportProps) {\n  const { toast } = useToast();\n  const [reportType, setReportType] = useState(\"summary\");\n  const [dateRange, setDateRange] = useState(\"month\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [showPDFExport, setShowPDFExport] = useState(false);\n\n  const { data: categories } = useQuery({\n    queryKey: ['/api/categories'],\n    retry: false,\n    enabled: open,\n  });\n\n  const getDateRange = () => {\n    const today = new Date();\n    let start = new Date();\n    let end = new Date();\n\n    switch (dateRange) {\n      case \"week\":\n        start.setDate(today.getDate() - 7);\n        break;\n      case \"month\":\n        start.setMonth(today.getMonth() - 1);\n        break;\n      case \"quarter\":\n        start.setMonth(today.getMonth() - 3);\n        break;\n      case \"year\":\n        start.setFullYear(today.getFullYear() - 1);\n        break;\n      case \"custom\":\n        return { startDate, endDate };\n      default:\n        start.setDate(today.getDate() - 30);\n    }\n\n    return {\n      startDate: start.toISOString().split('T')[0],\n      endDate: end.toISOString().split('T')[0]\n    };\n  };\n\n  const handleExport = async (format: 'csv' | 'pdf') => {\n    try {\n      if (format === 'pdf') {\n        setShowPDFExport(true);\n        return;\n      }\n\n      const { startDate: start, endDate: end } = getDateRange();\n      \n      // Simulate CSV export functionality\n      toast({\n        title: \"Export Started\",\n        description: `Generating ${format.toUpperCase()} report for ${reportType}...`,\n      });\n\n      // Here you would implement the actual CSV export logic\n      // For now, we'll simulate a download\n      setTimeout(() => {\n        const link = document.createElement('a');\n        link.href = '#'; // This would be the actual file URL\n        link.download = `expense-report-${reportType}-${start}-to-${end}.${format}`;\n        \n        toast({\n          title: \"Export Complete\",\n          description: `Your ${format.toUpperCase()} report has been generated successfully.`,\n        });\n      }, 2000);\n\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to generate report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const reportTypes = [\n    { value: \"summary\", label: \"Expense Summary\", description: \"Overall spending overview with totals and averages\" },\n    { value: \"detailed\", label: \"Detailed Transactions\", description: \"Complete list of all expenses with categories\" },\n    { value: \"category\", label: \"Category Breakdown\", description: \"Spending analysis by category with percentages\" },\n    { value: \"trends\", label: \"Spending Trends\", description: \"Time-based analysis showing spending patterns\" },\n    { value: \"budget\", label: \"Budget Analysis\", description: \"Budget vs actual spending comparison\" },\n  ];\n\n  return (\n    <>\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\" data-testid=\"modal-reports-export\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"h-5 w-5\" />\n            <span>Export Reports</span>\n          </DialogTitle>\n          <DialogDescription>\n            Generate and download detailed expense reports in various formats.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Report Type Selection */}\n          <div>\n            <Label htmlFor=\"reportType\">Report Type</Label>\n            <div className=\"grid grid-cols-1 gap-3 mt-2\">\n              {reportTypes.map((type) => (\n                <Card \n                  key={type.value} \n                  className={`cursor-pointer transition-all ${\n                    reportType === type.value ? 'border-primary bg-primary/5' : 'hover:border-gray-300'\n                  }`}\n                  onClick={() => setReportType(type.value)}\n                  data-testid={`card-report-type-${type.value}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`w-4 h-4 rounded-full border-2 mt-0.5 ${\n                        reportType === type.value ? 'border-primary bg-primary' : 'border-gray-300'\n                      }`} />\n                      <div>\n                        <h4 className=\"font-medium\">{type.label}</h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">{type.description}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Date Range Selection */}\n          <div>\n            <Label htmlFor=\"dateRange\">Date Range</Label>\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger data-testid=\"select-date-range\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"week\">Last 7 days</SelectItem>\n                <SelectItem value=\"month\">Last 30 days</SelectItem>\n                <SelectItem value=\"quarter\">Last 3 months</SelectItem>\n                <SelectItem value=\"year\">Last year</SelectItem>\n                <SelectItem value=\"custom\">Custom range</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Custom Date Range */}\n          {dateRange === \"custom\" && (\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"startDate\">Start Date</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  data-testid=\"input-start-date\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"endDate\">End Date</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  data-testid=\"input-end-date\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Category Filter */}\n          <div>\n            <Label htmlFor=\"categoryFilter\">Category Filter</Label>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger data-testid=\"select-category-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {(categories as any)?.map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm\">{category.icon}</span>\n                      <span>{category.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Export Buttons */}\n          <div className=\"border-t pt-6\">\n            <h4 className=\"font-medium mb-4\">Export Format</h4>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button \n                onClick={() => handleExport('csv')}\n                className=\"h-16 flex-col\"\n                variant=\"outline\"\n                data-testid=\"button-export-csv\"\n              >\n                <Download className=\"h-5 w-5 mb-2\" />\n                <div>\n                  <div className=\"font-medium\">CSV Format</div>\n                  <div className=\"text-xs text-gray-600\">Excel compatible</div>\n                </div>\n              </Button>\n              \n              <Button \n                onClick={() => handleExport('pdf')}\n                className=\"h-16 flex-col\"\n                variant=\"outline\"\n                data-testid=\"button-export-pdf\"\n              >\n                <FileText className=\"h-5 w-5 mb-2\" />\n                <div>\n                  <div className=\"font-medium\">PDF Format</div>\n                  <div className=\"text-xs text-gray-600\">Formatted report</div>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          {/* Report Preview */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-blue-900\">Report Preview</h4>\n                  <p className=\"text-sm text-blue-700 mt-1\">\n                    This {reportTypes.find(t => t.value === reportType)?.label.toLowerCase()} will include{' '}\n                    {dateRange === 'custom' ? `data from ${startDate} to ${endDate}` : `the ${dateRange === 'week' ? 'last 7 days' : dateRange === 'month' ? 'last 30 days' : dateRange === 'quarter' ? 'last 3 months' : 'last year'}`}\n                    {categoryFilter !== 'all' && ' for the selected category'}.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n\n    {/* PDF Export Dialog */}\n    {showPDFExport && (\n      <Dialog open={showPDFExport} onOpenChange={setShowPDFExport}>\n        <DialogContent className=\"sm:max-w-md\">\n          <PDFExport onClose={() => setShowPDFExport(false)} />\n        </DialogContent>\n      </Dialog>\n    )}\n    </>\n  );\n}","size_bytes":10624},"client/src/components/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Plus, \n  Tags, \n  FileText, \n  Brain,\n  Target,\n  LogOut,\n  User\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard, action: null },\n  { name: 'Add Expense', href: '#', icon: Plus, action: 'add-expense' },\n  { name: 'Categories', href: '#', icon: Tags, action: 'manage-categories' },\n  { name: 'Budgets', href: '#', icon: Target, action: 'budget-settings' },\n  { name: 'Reports', href: '/reports', icon: FileText, action: null },\n  { name: 'AI Insights', href: '/ai-insights', icon: Brain, action: null },\n];\n\ninterface SidebarProps {\n  onNavigate?: (action: string) => void;\n}\n\nexport function Sidebar({ onNavigate }: SidebarProps) {\n  const { user, logoutMutation } = useAuth();\n  const [location, navigate] = useLocation();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleNavClick = (item: any) => {\n    if (item.href && item.href !== '#') {\n      navigate(item.href);\n    } else if (item.action && onNavigate) {\n      onNavigate(item.action);\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col min-h-0 bg-white border-r border-gray-200\">\n      <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n        {/* Logo */}\n        <div className=\"flex items-center flex-shrink-0 px-4\">\n          <img \n            src=\"/@assets/generated_images/SpendSight_finance_app_logo_2a0ceabb.png\" \n            alt=\"SpendSight Logo\" \n            className=\"w-8 h-8 rounded-lg\"\n          />\n          <span className=\"ml-2 text-xl font-semibold text-gray-900\">SpendSight</span>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"mt-8 flex-1\" data-testid=\"sidebar-navigation\">\n          <div className=\"px-2 space-y-1\">\n            {navigation.map((item) => (\n              <button\n                key={item.name}\n                onClick={() => handleNavClick(item)}\n                className={cn(\n                  (item.href === location || (item.href === '/' && location === '/'))\n                    ? 'bg-orange-500 text-white'\n                    : 'text-gray-600 hover:bg-orange-50 hover:text-orange-700',\n                  'group flex items-center px-2 py-2 text-sm font-medium rounded-md w-full text-left transition-colors'\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n              >\n                <item.icon className=\"mr-3 h-5 w-5\" />\n                {item.name}\n              </button>\n            ))}\n          </div>\n        </nav>\n      </div>\n\n      {/* User Profile */}\n      <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n        <div className=\"flex-shrink-0 group block w-full\">\n          <div className=\"flex items-center\">\n            <div>\n              {(user as any)?.profileImageUrl ? (\n                <img \n                  className=\"inline-block h-9 w-9 rounded-full object-cover\" \n                  src={(user as any).profileImageUrl} \n                  alt=\"User avatar\"\n                  data-testid=\"img-user-avatar\"\n                />\n              ) : (\n                <div className=\"inline-block h-9 w-9 rounded-full bg-gray-300 flex items-center justify-center\">\n                  <User className=\"h-5 w-5 text-gray-600\" />\n                </div>\n              )}\n            </div>\n            <div className=\"ml-3 flex-1\">\n              <p className=\"text-sm font-medium text-gray-700 group-hover:text-gray-900\" data-testid=\"text-user-name\">\n                {(user as any)?.firstName && (user as any)?.lastName \n                  ? `${(user as any).firstName} ${(user as any).lastName}`\n                  : (user as any)?.email || 'User'\n                }\n              </p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"text-xs text-gray-500 hover:text-gray-700 p-0 h-auto\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-3 w-3 mr-1\" />\n                Sign out\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4344},"client/src/components/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingDown, CheckCircle, Tag, Lightbulb } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMemo } from \"react\";\n\nexport function StatsCards() {\n  const { toast } = useToast();\n  \n  // Memoize current month date range to prevent recalculation on every render\n  const { startOfMonth, endOfMonth } = useMemo(() => {\n    const now = new Date();\n    return {\n      startOfMonth: new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0],\n      endOfMonth: new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0]\n    };\n  }, []);\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/analytics/stats', { startDate: startOfMonth, endDate: endOfMonth }],\n    retry: false,\n  });\n\n  const { data: insights } = useQuery({\n    queryKey: ['/api/insights'],\n    retry: false,\n  });\n\n  const { data: budgets } = useQuery({\n    queryKey: ['/api/budgets'],\n    retry: false,\n  });\n\n  // Memoize expensive calculations to prevent unnecessary re-computations\n  // This must be before any conditional returns to maintain hooks order\n  const { totalSpent, categoriesUsed, topCategory, unreadInsights, budgetInfo } = useMemo(() => {\n    const totalSpent = (stats as any)?.totalSpent || 0;\n    const categoriesUsed = (stats as any)?.categoryBreakdown?.length || 0;\n    const topCategory = (stats as any)?.categoryBreakdown?.[0];\n    const unreadInsights = (insights as any)?.filter((insight: any) => insight.isRead === \"false\")?.length || 0;\n    \n    // Calculate budget status\n    const currentMonthBudgets = (budgets as any)?.filter((budget: any) => {\n      const budgetStart = new Date(budget.startDate);\n      const budgetEnd = new Date(budget.endDate);\n      const now = new Date();\n      return now >= budgetStart && now <= budgetEnd && budget.period === 'monthly';\n    }) || [];\n    \n    const totalBudget = currentMonthBudgets.reduce((sum: number, budget: any) => sum + parseFloat(budget.amount), 0);\n    const budgetRemaining = totalBudget - totalSpent;\n    const budgetStatus = totalBudget === 0 ? 'No Budget Set' : \n                        budgetRemaining >= 0 ? 'On Track' : 'Over Budget';\n    const budgetStatusColor = totalBudget === 0 ? 'text-gray-600' :\n                             budgetRemaining >= 0 ? 'text-green-600' : 'text-red-600';\n    \n    return {\n      totalSpent,\n      categoriesUsed,\n      topCategory,\n      unreadInsights,\n      budgetInfo: { totalBudget, budgetRemaining, budgetStatus, budgetStatusColor }\n    };\n  }, [stats, insights, budgets]);\n\n  // Memoize currency formatter to prevent recreation on every render\n  const formatCurrency = useMemo(() => {\n    const formatter = new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    });\n    return (amount: number) => formatter.format(amount);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={`skeleton-card-${i}`} className=\"animate-pulse\">\n            <CardContent className=\"p-5\">\n              <div className=\"h-20 bg-gray-200 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n      {/* Total Spent Card */}\n      <Card className=\"bg-white overflow-hidden shadow\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                <TrendingDown className=\"w-5 h-5 text-red-600\" />\n              </div>\n            </div>\n            <div className=\"ml-5 w-0 flex-1\">\n              <dl>\n                <dt className=\"text-sm font-medium text-gray-500 truncate\">Total Spent</dt>\n                <dd className=\"text-lg font-medium text-gray-900\" data-testid=\"text-total-spent\">\n                  {formatCurrency(totalSpent)}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </CardContent>\n        <div className=\"bg-gray-50 px-5 py-3\">\n          <div className=\"text-sm\">\n            <span className=\"font-medium text-gray-600\">This month</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Budget Status Card */}\n      <Card className=\"bg-white overflow-hidden shadow\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                budgetInfo.totalBudget === 0 ? 'bg-gray-100' : budgetInfo.budgetRemaining >= 0 ? 'bg-green-100' : 'bg-red-100'\n              }`}>\n                <CheckCircle className={`w-5 h-5 ${\n                  budgetInfo.totalBudget === 0 ? 'text-gray-600' : budgetInfo.budgetRemaining >= 0 ? 'text-green-600' : 'text-red-600'\n                }`} />\n              </div>\n            </div>\n            <div className=\"ml-5 w-0 flex-1\">\n              <dl>\n                <dt className=\"text-sm font-medium text-gray-500 truncate\">Budget Status</dt>\n                <dd className=\"text-lg font-medium text-gray-900\" data-testid=\"text-budget-status\">\n                  {budgetInfo.budgetStatus}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </CardContent>\n        <div className=\"bg-gray-50 px-5 py-3\">\n          <div className=\"text-sm\">\n            <span className={`font-medium ${budgetInfo.budgetStatusColor}`}>\n              {budgetInfo.totalBudget === 0 \n                ? 'Set budgets to track spending' \n                : budgetInfo.budgetRemaining >= 0 \n                  ? `${formatCurrency(budgetInfo.budgetRemaining)} remaining` \n                  : `${formatCurrency(Math.abs(budgetInfo.budgetRemaining))} over budget`}\n            </span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Categories Used Card */}\n      <Card className=\"bg-white overflow-hidden shadow\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-amber-100 rounded-lg flex items-center justify-center\">\n                <Tag className=\"w-5 h-5 text-amber-600\" />\n              </div>\n            </div>\n            <div className=\"ml-5 w-0 flex-1\">\n              <dl>\n                <dt className=\"text-sm font-medium text-gray-500 truncate\">Categories Used</dt>\n                <dd className=\"text-lg font-medium text-gray-900\" data-testid=\"text-categories-count\">\n                  {categoriesUsed}\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </CardContent>\n        <div className=\"bg-gray-50 px-5 py-3\">\n          <div className=\"text-sm\">\n            <span className=\"font-medium text-gray-600\" data-testid=\"text-top-category\">\n              {topCategory ? `${topCategory.categoryName} (${((topCategory.amount / totalSpent) * 100).toFixed(0)}%)` : 'No expenses yet'}\n            </span>\n          </div>\n        </div>\n      </Card>\n\n      {/* AI Insights Card */}\n      <Card className=\"bg-white overflow-hidden shadow\">\n        <CardContent className=\"p-5\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <Lightbulb className=\"w-5 h-5 text-purple-600\" />\n              </div>\n            </div>\n            <div className=\"ml-5 w-0 flex-1\">\n              <dl>\n                <dt className=\"text-sm font-medium text-gray-500 truncate\">AI Insights</dt>\n                <dd className=\"text-lg font-medium text-gray-900\" data-testid=\"text-insights-count\">\n                  {unreadInsights} New\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </CardContent>\n        <div className=\"bg-gray-50 px-5 py-3\">\n          <div className=\"text-sm\">\n            <span className=\"font-medium text-purple-600\">\n              {unreadInsights > 0 ? 'New recommendations available' : 'All insights reviewed'}\n            </span>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8538},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { InsertUser, User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      // Force query invalidation to ensure state updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged in to SpendSight.\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      // Force query invalidation to ensure state updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      toast({\n        title: \"Welcome!\",\n        description: \"Account created successfully. Welcome to SpendSight!\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      // Clear all cached queries to ensure clean state\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n        variant: \"default\",\n      });\n      // Slight delay to ensure state is cleared before redirect\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 100);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return {\n    ...context,\n    isAuthenticated: !!context.user,\n  };\n}","size_bytes":3786},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query parameters properly\n    const [baseUrl, ...params] = queryKey;\n    let url = baseUrl as string;\n    \n    // Convert additional parameters to query string\n    if (params.length > 0) {\n      const queryParams = new URLSearchParams();\n      params.forEach(param => {\n        if (typeof param === 'object' && param !== null) {\n          Object.entries(param).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n              queryParams.append(key, String(value));\n            }\n          });\n        }\n      });\n      \n      if (queryParams.toString()) {\n        url += '?' + queryParams.toString();\n      }\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2023},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Eye, EyeOff, DollarSign, Brain, TrendingUp, Shield } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  email: z.string().email(\"Invalid email address\").optional(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (!isLoading && user) {\n      navigate(\"/\");\n    }\n  }, [user, isLoading, navigate]);\n\n  const onLoginSubmit = (data: LoginData) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => {\n        // Delayed navigation to ensure state updates\n        setTimeout(() => navigate(\"/\"), 100);\n      }\n    });\n  };\n\n  const onRegisterSubmit = (data: RegisterData) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData, {\n      onSuccess: () => {\n        // Delayed navigation to ensure state updates\n        setTimeout(() => navigate(\"/\"), 100);\n      }\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-100\" data-testid=\"page-auth\">\n      <div className=\"flex flex-col lg:flex-row min-h-screen\">\n        {/* Hero Section */}\n        <div className=\"lg:flex-1 flex flex-col justify-center px-4 sm:px-6 lg:px-20 xl:px-24\">\n          <div className=\"mx-auto max-w-sm lg:max-w-none\">\n            <div className=\"text-center lg:text-left\">\n              <div className=\"flex items-center justify-center lg:justify-start space-x-3 mb-8\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"h-6 w-6 text-white\" />\n                </div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">SpendSight</h1>\n              </div>\n              \n              <h2 className=\"text-3xl lg:text-4xl font-extrabold text-gray-900 mb-6\">\n                Smart Expense Tracking with AI\n              </h2>\n              \n              <p className=\"text-lg text-gray-600 mb-8\">\n                Take control of your finances with AI-powered insights, automated categorization, \n                and personalized budget recommendations.\n              </p>\n\n              {/* Features */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-6 mb-8\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <Brain className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                  </div>\n                  <div className=\"text-left\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">AI-Powered Insights</h3>\n                    <p className=\"text-gray-600\">Get personalized spending recommendations and financial advice.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                    </div>\n                  </div>\n                  <div className=\"text-left\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">Smart Analytics</h3>\n                    <p className=\"text-gray-600\">Visual charts and reports to track your spending patterns.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <Shield className=\"h-5 w-5 text-purple-600\" />\n                    </div>\n                  </div>\n                  <div className=\"text-left\">\n                    <h3 className=\"text-lg font-medium text-gray-900\">Secure & Private</h3>\n                    <p className=\"text-gray-600\">Your financial data is encrypted and protected.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Auth Form Section */}\n        <div className=\"lg:flex-1 flex flex-col justify-center px-4 sm:px-6 lg:px-20 xl:px-24\">\n          <div className=\"mx-auto max-w-sm w-full\">\n            <Card className=\"shadow-xl border-0\">\n              <CardHeader className=\"text-center pb-6\">\n                <CardTitle className=\"text-2xl font-bold\">\n                  {isLogin ? 'Welcome Back' : 'Create Account'}\n                </CardTitle>\n                <p className=\"text-gray-600 mt-2\">\n                  {isLogin \n                    ? 'Sign in to continue to your dashboard' \n                    : 'Start your journey to better financial health'\n                  }\n                </p>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                {/* Toggle Buttons */}\n                <div className=\"grid grid-cols-2 gap-2 p-1 bg-gray-100 rounded-lg\">\n                  <Button\n                    variant={isLogin ? \"default\" : \"ghost\"}\n                    onClick={() => setIsLogin(true)}\n                    className=\"rounded-md\"\n                    data-testid=\"button-switch-login\"\n                  >\n                    Sign In\n                  </Button>\n                  <Button\n                    variant={!isLogin ? \"default\" : \"ghost\"}\n                    onClick={() => setIsLogin(false)}\n                    className=\"rounded-md\"\n                    data-testid=\"button-switch-register\"\n                  >\n                    Sign Up\n                  </Button>\n                </div>\n\n                {isLogin ? (\n                  /* Login Form */\n                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        {...loginForm.register('username')}\n                        data-testid=\"input-login-username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {loginForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"login-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          {...loginForm.register('password')}\n                          data-testid=\"input-login-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                      {loginForm.formState.errors.password && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login-submit\"\n                    >\n                      {loginMutation.isPending ? 'Signing In...' : 'Sign In'}\n                    </Button>\n                  </form>\n                ) : (\n                  /* Register Form */\n                  <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"register-firstName\">First Name</Label>\n                        <Input\n                          id=\"register-firstName\"\n                          type=\"text\"\n                          placeholder=\"John\"\n                          {...registerForm.register('firstName')}\n                          data-testid=\"input-register-firstName\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"register-lastName\">Last Name</Label>\n                        <Input\n                          id=\"register-lastName\"\n                          type=\"text\"\n                          placeholder=\"Doe\"\n                          {...registerForm.register('lastName')}\n                          data-testid=\"input-register-lastName\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"register-username\">Username *</Label>\n                      <Input\n                        id=\"register-username\"\n                        type=\"text\"\n                        placeholder=\"Choose a username\"\n                        {...registerForm.register('username')}\n                        data-testid=\"input-register-username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"register-email\">Email</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        placeholder=\"your@email.com\"\n                        {...registerForm.register('email')}\n                        data-testid=\"input-register-email\"\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"register-password\">Password *</Label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"register-password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a strong password\"\n                          {...registerForm.register('password')}\n                          data-testid=\"input-register-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                      {registerForm.formState.errors.password && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"register-confirmPassword\">Confirm Password *</Label>\n                      <Input\n                        id=\"register-confirmPassword\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm your password\"\n                        {...registerForm.register('confirmPassword')}\n                        data-testid=\"input-register-confirm-password\"\n                      />\n                      {registerForm.formState.errors.confirmPassword && (\n                        <p className=\"text-red-500 text-sm mt-1\">\n                          {registerForm.formState.errors.confirmPassword.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register-submit\"\n                    >\n                      {registerMutation.isPending ? 'Creating Account...' : 'Create Account'}\n                    </Button>\n                  </form>\n                )}\n\n                <div className=\"text-center text-sm text-gray-600\">\n                  <p>\n                    {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n                    <Button\n                      variant=\"link\"\n                      className=\"p-0 h-auto font-medium text-primary\"\n                      onClick={() => setIsLogin(!isLogin)}\n                      data-testid=\"button-switch-mode\"\n                    >\n                      {isLogin ? 'Sign Up' : 'Sign In'}\n                    </Button>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16480},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { StatsCards } from \"@/components/stats-cards\";\nimport { ExpenseChart } from \"@/components/expense-chart\";\nimport { FinanceNews } from \"@/components/finance-news\";\nimport { BudgetProgress } from \"@/components/budget-progress\";\nimport { AIInsights } from \"@/components/ai-insights\";\nimport { BudgetRecommendations } from \"@/components/budget-recommendations\";\nimport { RecentExpenses } from \"@/components/recent-expenses\";\nimport { ExpenseForm } from \"@/components/expense-form\";\nimport { BudgetSettings } from \"@/components/budget-settings\";\nimport { CategoriesManager } from \"@/components/categories-manager\";\nimport { ReportsExport } from \"@/components/reports-export\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download, Menu } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { isConnected } = useWebSocket();\n  const [showExpenseForm, setShowExpenseForm] = useState(false);\n  const [showBudgetSettings, setShowBudgetSettings] = useState(false);\n  const [showCategoriesManager, setShowCategoriesManager] = useState(false);\n  const [showReportsExport, setShowReportsExport] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleExport = () => {\n    setShowReportsExport(true);\n  };\n\n  const handleSidebarNavigate = (action: string) => {\n    switch (action) {\n      case 'add-expense':\n        setShowExpenseForm(true);\n        break;\n      case 'manage-categories':\n        setShowCategoriesManager(true);\n        break;\n      case 'budget-settings':\n        setShowBudgetSettings(true);\n        break;\n      case 'export-reports':\n        setShowReportsExport(true);\n        break;\n      case 'generate-insights':\n        // This will be handled by the AIInsights component\n        break;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:flex lg:w-64 lg:flex-col lg:fixed lg:inset-y-0\">\n        <Sidebar onNavigate={handleSidebarNavigate} />\n      </div>\n\n      {/* Mobile Sidebar */}\n      <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n        <SheetContent side=\"left\" className=\"p-0 w-64\">\n          <Sidebar onNavigate={handleSidebarNavigate} />\n        </SheetContent>\n      </Sheet>\n\n      {/* Main Content */}\n      <div className=\"lg:pl-64 flex flex-col flex-1\">\n        {/* Mobile Header */}\n        <div className=\"sticky top-0 z-10 lg:hidden pl-1 pt-1 sm:pl-3 sm:pt-3 bg-background border-b\">\n          <div className=\"flex items-center justify-between p-4\">\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"p-0 w-64\">\n                <Sidebar onNavigate={handleSidebarNavigate} />\n              </SheetContent>\n            </Sheet>\n            <div className=\"flex items-center space-x-2\">\n              <img \n                src=\"/@assets/generated_images/SpendSight_finance_tracker_logo_f7c8de5f.png\" \n                alt=\"SpendSight Logo\" \n                className=\"w-6 h-6 rounded\"\n              />\n              <span className=\"text-lg font-semibold\">SpendSight</span>\n            </div>\n          </div>\n        </div>\n\n        <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\n          <div className=\"py-6\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\">\n              {/* Page Header */}\n              <div className=\"md:flex md:items-center md:justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  <h2 className=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate\">\n                    Dashboard\n                  </h2>\n                  <div className=\"mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-6\">\n                    <div className=\"mt-2 flex items-center text-sm text-gray-500\">\n                      <svg className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3a1 1 0 011-1h6a1 1 0 011 1v4M8 7l4 10 4-10M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2h-2\"></path>\n                      </svg>\n                      <span data-testid=\"text-current-period\">\n                        {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                      </span>\n                      {isConnected && (\n                        <span className=\"ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                          <span className=\"w-2 h-2 bg-green-400 rounded-full mr-1 animate-pulse\"></span>\n                          Live\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleExport}\n                    data-testid=\"button-export\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export\n                  </Button>\n                  <Button \n                    onClick={() => setShowExpenseForm(true)}\n                    data-testid=\"button-add-expense\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Expense\n                  </Button>\n                </div>\n              </div>\n\n              {/* Stats Cards */}\n              <div className=\"mt-8\">\n                <StatsCards />\n              </div>\n\n              {/* Budget Progress Section */}\n              <div className=\"mt-8\">\n                <BudgetProgress onOpenBudgetSettings={() => setShowBudgetSettings(true)} />\n              </div>\n\n              {/* Charts and News Section */}\n              <div className=\"mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n                <ExpenseChart />\n              </div>\n\n              {/* AI Insights and Budget Recommendations Section */}\n              <div className=\"mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n                <AIInsights />\n                <BudgetRecommendations />\n              </div>\n\n              {/* Recent Expenses Section */}\n              <div className=\"mt-8\">\n                <RecentExpenses />\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Modals */}\n      {showExpenseForm && (\n        <ExpenseForm \n          open={showExpenseForm} \n          onClose={() => setShowExpenseForm(false)} \n        />\n      )}\n      \n      {showBudgetSettings && (\n        <BudgetSettings \n          open={showBudgetSettings} \n          onClose={() => setShowBudgetSettings(false)} \n        />\n      )}\n      \n      {showCategoriesManager && (\n        <CategoriesManager \n          open={showCategoriesManager} \n          onClose={() => setShowCategoriesManager(false)} \n        />\n      )}\n      \n      {showReportsExport && (\n        <ReportsExport \n          open={showReportsExport} \n          onClose={() => setShowReportsExport(false)} \n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":8583},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, TrendingUp, PieChart, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/auth\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-orange-50 to-yellow-50\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <img \n              src=\"/@assets/generated_images/SpendSight_finance_tracker_logo_f7c8de5f.png\" \n              alt=\"SpendSight Logo\" \n              className=\"w-8 h-8 rounded-lg\"\n            />\n            <span className=\"text-xl font-semibold text-gray-900\">SpendSight</span>\n          </div>\n          <Button onClick={handleLogin} className=\"bg-primary hover:bg-primary/90\" data-testid=\"button-login\">\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6\">\n            Smart Expense Tracking with <span className=\"text-primary\">AI</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            Take control of your finances with AI-powered categorization, intelligent insights, \n            and real-time budget tracking. Make smarter financial decisions today.\n          </p>\n          <Button \n            onClick={handleLogin} \n            size=\"lg\" \n            className=\"bg-primary hover:bg-primary/90 text-lg px-8 py-3\"\n            data-testid=\"button-get-started\"\n          >\n            Get Started Free\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            Powerful Features for Smart Money Management\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Brain className=\"w-6 h-6 text-primary\" />\n                </div>\n                <CardTitle>AI Categorization</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Automatically categorize expenses with advanced AI. No more manual sorting.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <TrendingUp className=\"w-6 h-6 text-secondary\" />\n                </div>\n                <CardTitle>Smart Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Get personalized budgeting recommendations and spending insights.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <PieChart className=\"w-6 h-6 text-accent\" />\n                </div>\n                <CardTitle>Visual Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Beautiful charts and graphs to visualize your spending patterns.\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <CardTitle>Secure & Private</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription>\n                  Your financial data is encrypted and secure. Privacy is our priority.\n                </CardDescription>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 bg-gradient-to-r from-primary to-orange-600 text-white\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to Take Control of Your Finances?</h2>\n          <p className=\"text-xl mb-8 text-blue-100\">\n            Join thousands of users who are already saving money with SpendSight.\n          </p>\n          <Button \n            onClick={handleLogin} \n            variant=\"secondary\" \n            size=\"lg\"\n            className=\"bg-white text-primary hover:bg-gray-100\"\n            data-testid=\"button-join-now\"\n          >\n            Join Now - It's Free\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-8 px-4 bg-gray-900 text-white\">\n        <div className=\"container mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <img \n              src=\"/@assets/generated_images/SpendSight_finance_tracker_logo_f7c8de5f.png\" \n              alt=\"SpendSight Logo\" \n              className=\"w-6 h-6 rounded\"\n            />\n            <span className=\"text-lg font-semibold\">SpendSight</span>\n          </div>\n          <p className=\"text-gray-400\">\n            © 2024 SpendSight. Intelligent expense tracking for everyone.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6186},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/models.ts":{"content":"import mongoose from 'mongoose';\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  username: { type: String, unique: true, sparse: true },\n  email: { type: String, unique: true, sparse: true },\n  firstName: String,\n  lastName: String,\n  password: String,\n  profileImageUrl: String,\n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc: any, ret: any) {\n      ret.id = ret._id.toString();\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Category Schema\nconst categorySchema = new mongoose.Schema({\n  name: { type: String, required: true, maxlength: 100 },\n  color: { type: String, required: true, maxlength: 7 },\n  icon: { type: String, maxlength: 50 },\n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc: any, ret: any) {\n      ret.id = ret._id.toString();\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Expense Schema\nconst expenseSchema = new mongoose.Schema({\n  userId: { type: String, required: true, index: true },\n  categoryId: { type: String, index: true },\n  amount: { type: Number, required: true },\n  description: { type: String, required: true, maxlength: 500 },\n  paymentMethod: { \n    type: String, \n    required: true,\n    enum: [\"cash\", \"credit_card\", \"debit_card\", \"upi\", \"bank_transfer\"]\n  },\n  date: { type: String, required: true },\n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc: any, ret: any) {\n      ret.id = ret._id.toString();\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Insight Schema\nconst insightSchema = new mongoose.Schema({\n  userId: { type: String, required: true, index: true },\n  type: { type: String, required: true, maxlength: 50 },\n  title: { type: String, required: true, maxlength: 200 },\n  description: { type: String, required: true },\n  priority: { type: String, default: \"medium\", maxlength: 20 },\n  isRead: { type: String, default: \"false\", maxlength: 10 },\n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc: any, ret: any) {\n      ret.id = ret._id.toString();\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Budget Schema\nconst budgetSchema = new mongoose.Schema({\n  userId: { type: String, required: true, index: true },\n  categoryId: String,\n  amount: { type: Number, required: true },\n  period: { type: String, required: true, default: \"monthly\" },\n  startDate: { type: String, required: true },\n  endDate: { type: String, required: true },\n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc: any, ret: any) {\n      ret.id = ret._id.toString();\n      delete ret._id;\n      delete ret.__v;\n      return ret;\n    }\n  }\n});\n\n// Export models\nexport const UserModel = mongoose.model('User', userSchema);\nexport const CategoryModel = mongoose.model('Category', categorySchema);\nexport const ExpenseModel = mongoose.model('Expense', expenseSchema);\nexport const InsightModel = mongoose.model('Insight', insightSchema);\nexport const BudgetModel = mongoose.model('Budget', budgetSchema);","size_bytes":3047},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Migrate from PostgreSQL to MongoDB\n[x] 4. Fix remaining authentication and database connectivity issues\n[x] 5. Verify the project is working using the feedback tool\n[x] 6. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":409},"server/database.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\n\nconst connectionString = process.env.DATABASE_URL;\n\nlet db: any = null;\n\nif (!connectionString) {\n  console.warn(\"⚠️  DATABASE_URL environment variable is not set - PostgreSQL features will be unavailable\");\n  db = null;\n} else {\n  // Create the connection\n  const client = postgres(connectionString);\n  db = drizzle(client, { schema });\n}\n\nexport { db };\nexport default db;","size_bytes":499},"server/schema.ts":{"content":"import { pgTable, text, timestamp, decimal, varchar, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 255 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }),\n  firstName: varchar(\"first_name\", { length: 255 }),\n  lastName: varchar(\"last_name\", { length: 255 }),\n  password: text(\"password\").notNull(),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: text(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  color: varchar(\"color\", { length: 7 }).notNull(),\n  icon: varchar(\"icon\", { length: 10 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const expenses = pgTable(\"expenses\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  categoryId: text(\"category_id\").references(() => categories.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  date: varchar(\"date\", { length: 10 }).notNull(),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const budgets = pgTable(\"budgets\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  categoryId: text(\"category_id\").references(() => categories.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  period: varchar(\"period\", { length: 20 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insights = pgTable(\"insights\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(),\n  isRead: varchar(\"is_read\", { length: 5 }).notNull().default(\"false\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Create Zod schemas\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\nexport const insertCategorySchema = createInsertSchema(categories);\nexport const selectCategorySchema = createSelectSchema(categories);\nexport const insertExpenseSchema = createInsertSchema(expenses);\nexport const selectExpenseSchema = createSelectSchema(expenses);\nexport const insertBudgetSchema = createInsertSchema(budgets);\nexport const selectBudgetSchema = createSelectSchema(budgets);\nexport const insertInsightSchema = createInsertSchema(insights);\nexport const selectInsightSchema = createSelectSchema(insights);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type UpsertUser = Partial<InsertUser> & { id?: string; _id?: string };\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = typeof categories.$inferInsert;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertExpense = typeof expenses.$inferInsert;\nexport type ExpenseWithCategory = Expense & { category: Category | null };\nexport type Budget = typeof budgets.$inferSelect;\nexport type InsertBudget = typeof budgets.$inferInsert;\nexport type Insight = typeof insights.$inferSelect;\nexport type InsertInsight = typeof insights.$inferInsert;","size_bytes":3787},"server/services/aiInsights.ts":{"content":"// server/services/aiInsights.ts\nimport OpenAI from \"openai\";\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_KEY });\n\nexport async function generateInsights(expenseSummary: any[], comparison?: any[]) {\n  const prompt = `\nYou are a financial assistant. Based on the user's expense summary, generate clear \nbudgeting insights and savings recommendations.\n\nData:\n${JSON.stringify(expenseSummary)}\n\n${comparison ? `Last Month Data: ${JSON.stringify(comparison)}` : \"\"}\n\nReturn JSON in this format:\n{\n  \"recommendations\": \"string\",\n  \"savingsTips\": \"string\"\n}\n`;\n\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o-mini\", // or gpt-4-turbo, gpt-3.5, Gemini equivalent\n    messages: [{ role: \"user\", content: prompt }],\n    temperature: 0.5\n  });\n\n  const text = response.choices[0].message?.content || \"{}\";\n  try {\n    return JSON.parse(text);\n  } catch {\n    return { recommendations: text, savingsTips: \"\" };\n  }\n}\n","size_bytes":947},"server/services/expenseSummary.ts":{"content":"// server/services/expenseSummary.ts\nimport { ExpenseModel as Expense } from \"../models.js\";\n\nexport async function getUserExpenseSummary(userId: string, start: Date, end: Date) {\n  const pipeline = [\n    { $match: { userId, date: { $gte: start, $lte: end } } },\n    { $group: { _id: \"$category\", total: { $sum: \"$amount\" } } }\n  ];\n  const result = await Expense.aggregate(pipeline);\n\n  // Example result: [ { _id: \"Food\", total: 1200 }, { _id: \"Travel\", total: 800 } ]\n  return result;\n}\n","size_bytes":490},"client/src/components/budget-recommendations.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Brain, TrendingUp, DollarSign, Target, Lightbulb } from \"lucide-react\";\n\ninterface BudgetRecommendation {\n  category: string;\n  currentSpend: number;\n  recommendedBudget: number;\n  reason: string;\n  potentialSavings: number;\n}\n\nexport function BudgetRecommendations() {\n  const { toast } = useToast();\n\n  const { data: recommendations, isLoading } = useQuery({\n    queryKey: ['/api/ai/budget-recommendations'],\n    retry: false,\n  });\n\n  const generateRecommendationsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/ai/budget-recommendations\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ai/budget-recommendations'] });\n      toast({\n        title: \"Budget Recommendations Generated\",\n        description: \"AI has analyzed your spending and created personalized budget suggestions.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate budget recommendations. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const applyBudgetMutation = useMutation({\n    mutationFn: async (recommendation: BudgetRecommendation) => {\n      return await apiRequest(\"POST\", \"/api/budgets\", {\n        categoryName: recommendation.category,\n        amount: recommendation.recommendedBudget,\n        period: \"monthly\",\n        startDate: new Date().toISOString().split('T')[0],\n        endDate: new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split('T')[0]\n      });\n    },\n    onSuccess: (_, recommendation) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/budgets'] });\n      toast({\n        title: \"Budget Applied\",\n        description: `Set ₹${recommendation.recommendedBudget} monthly budget for ${recommendation.category}.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to apply budget. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateRecommendations = () => {\n    generateRecommendationsMutation.mutate();\n  };\n\n  const handleApplyBudget = (recommendation: BudgetRecommendation) => {\n    applyBudgetMutation.mutate(recommendation);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white shadow animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white shadow\" data-testid=\"card-budget-recommendations\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Brain className=\"h-5 w-5 text-purple-500\" />\n            <span>AI Budget Recommendations</span>\n          </CardTitle>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleGenerateRecommendations}\n            disabled={generateRecommendationsMutation.isPending}\n            data-testid=\"button-generate-recommendations\"\n          >\n            <TrendingUp className={`h-4 w-4 mr-2 ${generateRecommendationsMutation.isPending ? 'animate-spin' : ''}`} />\n            {generateRecommendationsMutation.isPending ? 'Analyzing...' : 'Generate'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {(recommendations as any) && (recommendations as any).length > 0 ? (\n          <div className=\"space-y-4\" data-testid=\"recommendations-list\">\n            {(recommendations as any).map((recommendation: BudgetRecommendation, index: number) => (\n              <div \n                key={index}\n                className=\"p-4 rounded-lg border border-purple-200 bg-purple-50 hover:bg-purple-100 transition-colors\"\n                data-testid={`recommendation-${index}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h4 className=\"text-sm font-semibold text-purple-900\">\n                        {recommendation.category}\n                      </h4>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        AI Suggested\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-3 gap-4 mb-3 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Current Spend:</span>\n                        <div className=\"font-medium text-gray-900\">₹{recommendation.currentSpend}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Recommended:</span>\n                        <div className=\"font-medium text-purple-700\">₹{recommendation.recommendedBudget}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Potential Savings:</span>\n                        <div className=\"font-medium text-green-600\">₹{recommendation.potentialSavings}</div>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-700 mb-3\">\n                      <Lightbulb className=\"h-4 w-4 inline mr-1 text-amber-500\" />\n                      {recommendation.reason}\n                    </p>\n                    \n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleApplyBudget(recommendation)}\n                      disabled={applyBudgetMutation.isPending}\n                      className=\"bg-purple-600 hover:bg-purple-700\"\n                      data-testid={`button-apply-budget-${index}`}\n                    >\n                      <Target className=\"h-4 w-4 mr-1\" />\n                      Apply Budget\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Brain className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No recommendations yet</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Add expenses across different categories to get AI-powered budget recommendations.\n            </p>\n            <div className=\"mt-6\">\n              <Button \n                onClick={handleGenerateRecommendations}\n                disabled={generateRecommendationsMutation.isPending}\n                data-testid=\"button-generate-first-recommendations\"\n              >\n                <TrendingUp className={`h-4 w-4 mr-2 ${generateRecommendationsMutation.isPending ? 'animate-spin' : ''}`} />\n                Generate Recommendations\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8042},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  timestamp?: number;\n}\n\nexport function setupWebSocket(server: Server) {\n  const wss = new WebSocketServer({ server, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('🔗 New WebSocket connection established');\n    clients.add(ws);\n\n    // Send welcome message\n    const welcomeMessage: WebSocketMessage = {\n      type: 'connection',\n      data: { message: 'Connected to SpendSight real-time updates' },\n      timestamp: Date.now()\n    };\n    \n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(welcomeMessage));\n    }\n\n    // Handle incoming messages\n    ws.on('message', (data: Buffer) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(data.toString());\n        console.log('📨 Received WebSocket message:', message.type);\n        \n        // Echo message back or handle specific message types\n        if (message.type === 'ping') {\n          const pongMessage: WebSocketMessage = {\n            type: 'pong',\n            timestamp: Date.now()\n          };\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify(pongMessage));\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    // Handle client disconnect\n    ws.on('close', () => {\n      console.log('🔌 WebSocket connection closed');\n      clients.delete(ws);\n    });\n\n    // Handle errors\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n\n  // Function to broadcast to all connected clients\n  const broadcast = (message: WebSocketMessage) => {\n    const messageStr = JSON.stringify(message);\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  };\n\n  // Function to notify expense updates\n  const notifyExpenseUpdate = (expense: any, action: 'create' | 'update' | 'delete') => {\n    const message: WebSocketMessage = {\n      type: 'expense_update',\n      data: { expense, action },\n      timestamp: Date.now()\n    };\n    broadcast(message);\n  };\n\n  // Function to notify insights updates\n  const notifyInsightsUpdate = (insights: any[]) => {\n    const message: WebSocketMessage = {\n      type: 'insights_update',\n      data: { insights },\n      timestamp: Date.now()\n    };\n    broadcast(message);\n  };\n\n  // Function to notify analytics updates\n  const notifyAnalyticsUpdate = (analytics: any) => {\n    const message: WebSocketMessage = {\n      type: 'analytics_update',\n      data: { analytics },\n      timestamp: Date.now()\n    };\n    broadcast(message);\n  };\n\n  return {\n    broadcast,\n    notifyExpenseUpdate,\n    notifyInsightsUpdate,\n    notifyAnalyticsUpdate,\n    getConnectedClientsCount: () => clients.size\n  };\n}","size_bytes":3001},"client/src/components/pdf-export.tsx":{"content":"import React, { useState, useMemo, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Download, FileText, Loader2 } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\ninterface PDFExportProps {\n  onClose: () => void;\n}\n\nexport function PDFExport({ onClose }: PDFExportProps) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n\n  const { data: expenses = [] } = useQuery({\n    queryKey: ['/api/expenses'],\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/analytics/stats'],\n  });\n\n  const { data: insights = [] } = useQuery({\n    queryKey: ['/api/insights'],\n  });\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      // Create a temporary container for the report\n      const reportElement = document.createElement('div');\n      reportElement.style.width = '800px';\n      reportElement.style.padding = '20px';\n      reportElement.style.backgroundColor = 'white';\n      reportElement.style.fontFamily = 'Arial, sans-serif';\n      reportElement.style.position = 'absolute';\n      reportElement.style.left = '-9999px';\n      \n      const currentDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n\n      reportElement.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <img src=\"/@assets/generated_images/SpendSight_finance_tracker_logo_f7c8de5f.png\" \n               alt=\"SpendSight Logo\" \n               style=\"width: 50px; height: 50px; margin-bottom: 10px;\">\n          <h1 style=\"color: #2563eb; margin: 10px 0;\">SpendSight Financial Report</h1>\n          <p style=\"color: #666; margin: 0;\">Generated on ${currentDate}</p>\n        </div>\n\n        <div style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 5px;\">Financial Summary</h2>\n          <div style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-top: 15px;\">\n            <div style=\"background: #f8fafc; padding: 15px; border-radius: 8px;\">\n              <h3 style=\"margin: 0 0 5px 0; color: #333;\">Total Spent</h3>\n              <p style=\"font-size: 24px; font-weight: bold; color: #ef4444; margin: 0;\">₹${(analytics as any)?.totalSpent || 0}</p>\n            </div>\n            <div style=\"background: #f8fafc; padding: 15px; border-radius: 8px;\">\n              <h3 style=\"margin: 0 0 5px 0; color: #333;\">Total Expenses</h3>\n              <p style=\"font-size: 24px; font-weight: bold; color: #6366f1; margin: 0;\">${(expenses as any[]).length}</p>\n            </div>\n          </div>\n        </div>\n\n        <div style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 5px;\">Category Breakdown</h2>\n          <div style=\"margin-top: 15px;\">\n            ${(analytics as any)?.categoryBreakdown?.map((cat: any) => `\n              <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #e5e7eb;\">\n                <div style=\"display: flex; align-items: center;\">\n                  <div style=\"width: 12px; height: 12px; background-color: ${cat.color}; border-radius: 50%; margin-right: 10px;\"></div>\n                  <span style=\"font-weight: 500;\">${cat.categoryName}</span>\n                </div>\n                <span style=\"font-weight: bold;\">₹${cat.amount}</span>\n              </div>\n            `).join('') || '<p>No category data available</p>'}\n          </div>\n        </div>\n\n        <div style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 5px;\">AI Insights</h2>\n          <div style=\"margin-top: 15px;\">\n            ${Array.isArray(insights) ? insights.slice(0, 3).map((insight: any, index: number) => \n              `<div style=\"background: ${insight.type === 'alert' ? '#fef2f2' : insight.type === 'warning' ? '#fffbeb' : insight.type === 'goal' ? '#f0fdf4' : '#f8fafc'}; \n                          border-left: 4px solid ${insight.type === 'alert' ? '#ef4444' : insight.type === 'warning' ? '#f59e0b' : insight.type === 'goal' ? '#10b981' : '#6366f1'}; \n                          padding: 15px; margin-bottom: 15px; border-radius: 0 8px 8px 0;\">\n                <h3 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px;\">• ${insight.title}</h3>\n                <p style=\"margin: 0; color: #666; line-height: 1.5;\">${insight.description}</p>\n              </div>`\n            ).join('') : '<p>No insights available</p>'}\n          </div>\n        </div>\n\n        <div style=\"margin-bottom: 30px;\">\n          <h2 style=\"color: #333; border-bottom: 2px solid #6366f1; padding-bottom: 5px;\">Recent Expenses</h2>\n          <table style=\"width: 100%; border-collapse: collapse; margin-top: 15px;\">\n            <thead>\n              <tr style=\"background: #f8fafc;\">\n                <th style=\"padding: 12px; text-align: left; border: 1px solid #e5e7eb;\">Date</th>\n                <th style=\"padding: 12px; text-align: left; border: 1px solid #e5e7eb;\">Description</th>\n                <th style=\"padding: 12px; text-align: left; border: 1px solid #e5e7eb;\">Category</th>\n                <th style=\"padding: 12px; text-align: right; border: 1px solid #e5e7eb;\">Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${Array.isArray(expenses) ? expenses.slice(0, 10).map((expense: any) => \n                `<tr>\n                  <td style=\"padding: 10px; border: 1px solid #e5e7eb;\">${new Date(expense.date).toLocaleDateString()}</td>\n                  <td style=\"padding: 10px; border: 1px solid #e5e7eb;\">${expense.description}</td>\n                  <td style=\"padding: 10px; border: 1px solid #e5e7eb;\">${expense.category?.name || 'Uncategorized'}</td>\n                  <td style=\"padding: 10px; border: 1px solid #e5e7eb; text-align: right;\">₹${expense.amount}</td>\n                </tr>`\n              ).join('') : '<tr><td colspan=\"4\" style=\"padding: 20px; text-align: center;\">No expenses found</td></tr>'}\n            </tbody>\n          </table>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n          <p style=\"color: #666; font-size: 12px; margin: 0;\">Generated by SpendSight - Smart Financial Management</p>\n        </div>\n      `;\n\n      document.body.appendChild(reportElement);\n\n      // Generate canvas from the element\n      const canvas = await html2canvas(reportElement, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: false,\n        backgroundColor: '#ffffff'\n      });\n\n      // Remove temporary element\n      document.body.removeChild(reportElement);\n\n      // Create PDF\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgWidth = 210;\n      const pageHeight = 295;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      let heightLeft = imgHeight;\n      let position = 0;\n\n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n\n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n\n      // Download the PDF\n      const fileName = `SpendSight_Report_${new Date().toISOString().split('T')[0]}.pdf`;\n      pdf.save(fileName);\n\n      toast({\n        title: \"Export Successful\",\n        description: \"Your financial report has been downloaded as PDF.\",\n      });\n\n      onClose();\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to generate PDF report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <FileText className=\"h-5 w-5 text-primary\" />\n          <span>Export PDF Report</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-sm text-gray-600\">\n          <p>Generate a comprehensive financial report including:</p>\n          <ul className=\"list-disc list-inside mt-2 space-y-1\">\n            <li>Financial summary and statistics</li>\n            <li>Category breakdown with visualizations</li>\n            <li>AI-generated insights and recommendations</li>\n            <li>Recent expense transactions</li>\n          </ul>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button \n            onClick={generatePDF} \n            disabled={isGenerating}\n            className=\"flex-1\"\n            data-testid=\"button-generate-pdf\"\n          >\n            {isGenerating ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Download className=\"h-4 w-4 mr-2\" />\n            )}\n            {isGenerating ? 'Generating...' : 'Download PDF'}\n          </Button>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9602},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  timestamp?: number;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('🔗 WebSocket connected');\n        setIsConnected(true);\n        \n        // Clear any existing reconnect timeout\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n          reconnectTimeoutRef.current = null;\n        }\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          setLastMessage(message);\n          \n          // Handle different message types\n          switch (message.type) {\n            case 'connection':\n              console.log('✅ WebSocket connection confirmed');\n              break;\n              \n            case 'expense_update':\n              console.log('💰 Expense update received:', message.data);\n              // Invalidate relevant queries to refresh data\n              queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/analytics/stats'] });\n              \n              toast({\n                title: \"Expense Updated\",\n                description: \"Your expenses have been updated in real-time.\",\n              });\n              break;\n              \n            case 'insights_update':\n              console.log('🧠 Insights update received:', message.data);\n              queryClient.invalidateQueries({ queryKey: ['/api/insights'] });\n              \n              toast({\n                title: \"New Insights Available\",\n                description: \"Fresh AI insights have been generated for your expenses.\",\n              });\n              break;\n              \n            case 'analytics_update':\n              console.log('📊 Analytics update received:', message.data);\n              queryClient.invalidateQueries({ queryKey: ['/api/analytics/stats'] });\n              break;\n              \n            case 'pong':\n              console.log('🏓 WebSocket ping-pong successful');\n              break;\n              \n            default:\n              console.log('📨 Unknown message type:', message.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('🔌 WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log('🔄 Attempting to reconnect WebSocket...');\n          connect();\n        }, 3000);\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const disconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    \n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    setIsConnected(false);\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected, cannot send message');\n    }\n  };\n\n  const sendPing = () => {\n    sendMessage({ type: 'ping', timestamp: Date.now() });\n  };\n\n  useEffect(() => {\n    connect();\n    \n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  // Ping every 30 seconds to keep connection alive\n  useEffect(() => {\n    if (isConnected) {\n      const pingInterval = setInterval(sendPing, 30000);\n      return () => clearInterval(pingInterval);\n    }\n  }, [isConnected]);\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n    sendPing,\n    connect,\n    disconnect\n  };\n}","size_bytes":4756},"client/src/components/budget-progress.tsx":{"content":"import React, { useMemo } from 'react';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, Target, DollarSign, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface BudgetProgressProps {\n  onOpenBudgetSettings?: () => void;\n}\n\nexport function BudgetProgress({ onOpenBudgetSettings }: BudgetProgressProps) {\n  const { data: budgets, isLoading } = useQuery({\n    queryKey: ['/api/budgets'],\n    retry: false,\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: ['/api/expenses'],\n    retry: false,\n  });\n\n  const { data: userProfile } = useQuery({\n    queryKey: ['/api/user/profile'],\n    retry: false,\n  });\n\n  const budgetData = useMemo(() => {\n    if (!budgets || !expenses) return [];\n\n    return (budgets as any[]).map((budget: any) => {\n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      \n      // Calculate spent amount for this budget's category in current period\n      const categoryExpenses = (expenses as any[]).filter((expense: any) => {\n        const expenseDate = new Date(expense.date);\n        const isCurrentPeriod = budget.period === 'monthly' \n          ? expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear\n          : true; // Add logic for weekly/yearly if needed\n\n        return isCurrentPeriod && (\n          !budget.categoryId || \n          budget.categoryId === 'all' || \n          expense.categoryId === budget.categoryId\n        );\n      });\n\n      const spent = categoryExpenses.reduce((sum: number, expense: any) => sum + parseFloat(expense.amount), 0);\n      const budgetAmount = parseFloat(budget.amount);\n      const percentage = Math.min((spent / budgetAmount) * 100, 100);\n      const remaining = Math.max(budgetAmount - spent, 0);\n      \n      return {\n        ...budget,\n        spent,\n        budgetAmount,\n        percentage,\n        remaining,\n        isOverBudget: spent > budgetAmount,\n        categoryExpenses: categoryExpenses.length\n      };\n    });\n  }, [budgets, expenses]);\n\n  const monthlyIncome = useMemo(() => {\n    return (userProfile as any)?.monthlyIncome || 0;\n  }, [userProfile]);\n\n  const totalBudgetedAmount = useMemo(() => {\n    return budgetData.reduce((sum, budget) => sum + budget.budgetAmount, 0);\n  }, [budgetData]);\n\n  const totalSpentAmount = useMemo(() => {\n    return budgetData.reduce((sum, budget) => sum + budget.spent, 0);\n  }, [budgetData]);\n\n  const incomeUtilization = useMemo(() => {\n    if (!monthlyIncome) return 0;\n    return Math.min((totalBudgetedAmount / monthlyIncome) * 100, 100);\n  }, [monthlyIncome, totalBudgetedAmount]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getProgressColor = (percentage: number, isOverBudget: boolean) => {\n    if (isOverBudget) return \"bg-red-500\";\n    if (percentage >= 80) return \"bg-yellow-500\";\n    if (percentage >= 60) return \"bg-orange-500\";\n    return \"bg-green-500\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white shadow animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white shadow\" data-testid=\"budget-progress-card\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n        <CardTitle className=\"flex items-center space-x-2 text-lg font-medium text-gray-900\">\n          <Target className=\"h-5 w-5 text-blue-500\" />\n          <span>Budget Progress</span>\n        </CardTitle>\n        {onOpenBudgetSettings && (\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={onOpenBudgetSettings}\n            data-testid=\"button-manage-budgets\"\n          >\n            Manage\n          </Button>\n        )}\n      </CardHeader>\n      <CardContent>\n        {/* Income vs Budget Overview */}\n        {monthlyIncome > 0 && (\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium text-blue-900\">Monthly Income Allocation</span>\n              <span className=\"text-sm text-blue-700\">{incomeUtilization.toFixed(1)}%</span>\n            </div>\n            <Progress \n              value={incomeUtilization} \n              className=\"h-2 mb-2\" \n            />\n            <div className=\"flex justify-between text-xs text-blue-600\">\n              <span>Income: {formatCurrency(monthlyIncome)}</span>\n              <span>Budgeted: {formatCurrency(totalBudgetedAmount)}</span>\n            </div>\n          </div>\n        )}\n\n        {budgetData && budgetData.length > 0 ? (\n          <div className=\"space-y-4\" data-testid=\"budget-progress-list\">\n            {budgetData.map((budget: any, index: number) => (\n              <div \n                key={budget.id}\n                className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                data-testid={`budget-progress-${index}`}\n              >\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h4 className=\"font-medium text-sm text-gray-900\">\n                        {budget.categoryName || 'All Categories'}\n                      </h4>\n                      <Badge \n                        variant={budget.isOverBudget ? \"destructive\" : budget.percentage >= 80 ? \"secondary\" : \"default\"}\n                        className=\"text-xs\"\n                      >\n                        {budget.isOverBudget ? (\n                          <>\n                            <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                            Over Budget\n                          </>\n                        ) : budget.percentage >= 80 ? (\n                          <>\n                            <TrendingUp className=\"h-3 w-3 mr-1\" />\n                            Near Limit\n                          </>\n                        ) : (\n                          <>\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            On Track\n                          </>\n                        )}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center text-xs text-gray-500 space-x-3\">\n                      <span>{budget.period} • {budget.categoryExpenses} transactions</span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {formatCurrency(budget.spent)} / {formatCurrency(budget.budgetAmount)}\n                    </div>\n                    <div className={`text-xs ${budget.isOverBudget ? 'text-red-600' : 'text-green-600'}`}>\n                      {budget.isOverBudget ? 'Exceeded by ' : 'Remaining: '}\n                      {formatCurrency(budget.isOverBudget ? budget.spent - budget.budgetAmount : budget.remaining)}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-xs text-gray-600\">\n                    <span>Progress</span>\n                    <span>{budget.percentage.toFixed(1)}%</span>\n                  </div>\n                  <Progress \n                    value={budget.percentage} \n                    className=\"h-2\" \n                    // className={`h-2 ${getProgressColor(budget.percentage, budget.isOverBudget)}`}\n                  />\n                </div>\n              </div>\n            ))}\n\n            {/* Total Summary */}\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium text-gray-900\">Total this month</span>\n                <div className=\"text-right\">\n                  <div className=\"font-medium text-gray-900\">\n                    {formatCurrency(totalSpentAmount)} / {formatCurrency(totalBudgetedAmount)}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    {((totalSpentAmount / totalBudgetedAmount) * 100).toFixed(1)}% of budget used\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No budgets set</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Create budgets to track your spending and reach your financial goals.\n            </p>\n            {onOpenBudgetSettings && (\n              <Button onClick={onOpenBudgetSettings}>\n                <Target className=\"h-4 w-4 mr-2\" />\n                Set Your First Budget\n              </Button>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9792},"client/src/components/finance-news.tsx":{"content":"import React, { useState, useMemo, useCallback } from 'react';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ExternalLink, TrendingUp, DollarSign, Building, Globe, RefreshCw } from \"lucide-react\";\n\ninterface NewsItem {\n  title: string;\n  description: string;\n  url: string;\n  source: string;\n  publishedAt: string;\n  category: string;\n}\n\ninterface FinanceNewsProps {\n  compact?: boolean;\n}\n\nexport function FinanceNews({ compact = false }: FinanceNewsProps) {\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n\n  const { data: financeNews, isLoading, refetch } = useQuery({\n    queryKey: ['/api/finance-news'],\n    queryFn: async () => {\n      const response = await fetch('/api/finance-news');\n      if (!response.ok) {\n        throw new Error('Failed to fetch finance news');\n      }\n      return response.json();\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const handleNewsClick = useCallback((newsItem: NewsItem) => {\n    if (newsItem.url) {\n      window.open(newsItem.url, '_blank', 'noopener,noreferrer');\n    }\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    refetch();\n    toast({\n      title: \"Refreshing News\",\n      description: \"Getting latest finance updates...\",\n    });\n  }, [refetch, toast]);\n\n  const categories = useMemo(() => {\n    if (!financeNews) return [];\n    const cats = ['all', ...new Set((financeNews as NewsItem[]).map(item => item.category))];\n    return cats;\n  }, [financeNews]);\n\n  const filteredNews = useMemo(() => {\n    if (!financeNews) return [];\n    if (selectedCategory === 'all') return financeNews as NewsItem[];\n    return (financeNews as NewsItem[]).filter(item => item.category === selectedCategory);\n  }, [financeNews, selectedCategory]);\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'fintech': return <TrendingUp className=\"h-3 w-3\" />;\n      case 'banking': return <Building className=\"h-3 w-3\" />;\n      case 'markets': return <DollarSign className=\"h-3 w-3\" />;\n      default: return <Globe className=\"h-3 w-3\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={`bg-white shadow ${compact ? 'h-64' : 'h-96'}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 animate-pulse\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(compact ? 3 : 5)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`bg-white shadow ${compact ? 'h-64' : 'h-96'}`} data-testid=\"finance-news-card\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n        <CardTitle className=\"flex items-center space-x-2 text-lg font-medium text-gray-900\">\n          <TrendingUp className=\"h-5 w-5 text-orange-500\" />\n          <span>📈 Finance News</span>\n        </CardTitle>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          onClick={handleRefresh}\n          disabled={isLoading}\n          data-testid=\"button-refresh-news\"\n        >\n          <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {!compact && categories.length > 1 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {categories.map((category) => (\n              <Badge\n                key={category}\n                variant={selectedCategory === category ? \"default\" : \"outline\"}\n                className=\"cursor-pointer text-xs\"\n                onClick={() => setSelectedCategory(category)}\n              >\n                {getCategoryIcon(category)}\n                <span className=\"ml-1 capitalize\">{category}</span>\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        <div \n          className={`${compact ? 'h-44' : 'h-64'} overflow-y-auto space-y-3`} \n          data-testid=\"finance-news-feed\"\n        >\n          {filteredNews && filteredNews.length > 0 ? (\n            filteredNews.slice(0, compact ? 4 : 8).map((newsItem: NewsItem, index: number) => (\n              <div \n                key={index}\n                className=\"p-3 border border-gray-200 rounded-lg hover:bg-orange-50 hover:border-orange-300 cursor-pointer transition-all duration-200 group\"\n                onClick={() => handleNewsClick(newsItem)}\n                data-testid={`news-item-${index}`}\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-medium text-sm text-gray-900 group-hover:text-orange-700 line-clamp-2 flex-1\">\n                    {newsItem.title}\n                  </h4>\n                  <ExternalLink className=\"h-3 w-3 text-gray-400 group-hover:text-orange-500 ml-2 flex-shrink-0\" />\n                </div>\n                \n                {!compact && (\n                  <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n                    {newsItem.description}\n                  </p>\n                )}\n                \n                <div className=\"flex justify-between items-center text-xs\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {getCategoryIcon(newsItem.category)}\n                      <span className=\"ml-1\">{newsItem.source}</span>\n                    </Badge>\n                  </div>\n                  <span className=\"text-gray-500\">\n                    {new Date(newsItem.publishedAt).toLocaleDateString('en-IN')}\n                  </span>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"flex items-center justify-center h-full text-gray-500\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm font-medium\">📰 Loading finance news...</p>\n                <p className=\"text-xs\">Stay updated with latest market trends</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6703},"client/src/pages/ai-insights.tsx":{"content":"import React, { useState, useMemo, useCallback } from 'react';\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Brain, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  Target, \n  PiggyBank, \n  Calendar,\n  DollarSign,\n  BarChart3,\n  Lightbulb,\n  RefreshCw,\n  Award,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface InsightData {\n  type: 'spending_pattern' | 'budget_alert' | 'savings_opportunity' | 'goal_tracking';\n  title: string;\n  description: string;\n  severity: 'low' | 'medium' | 'high';\n  category?: string;\n  amount?: number;\n  percentage?: number;\n  recommendation: string;\n  actionable: boolean;\n}\n\ninterface SpendingAnalysis {\n  totalSpent: number;\n  avgDailySpend: number;\n  topCategory: string;\n  topCategoryAmount: number;\n  monthOverMonth: number;\n  unusualTransactions: number;\n  predictedMonthlySpend: number;\n}\n\nexport default function AIInsightsPage() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: insights, isLoading: insightsLoading, refetch: refetchInsights } = useQuery({\n    queryKey: ['/api/insights'],\n    retry: false,\n  });\n\n  const { data: expenses } = useQuery({\n    queryKey: ['/api/expenses'],\n    retry: false,\n  });\n\n  const { data: budgets } = useQuery({\n    queryKey: ['/api/budgets'],\n    retry: false,\n  });\n\n  const generateInsightsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/ai/generate-insights\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/insights'] });\n      toast({\n        title: \"AI Analysis Complete\",\n        description: \"Fresh insights generated based on your latest spending patterns.\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\", \n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate insights. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const spendingAnalysis = useMemo((): SpendingAnalysis => {\n    if (!expenses) return {\n      totalSpent: 0,\n      avgDailySpend: 0,\n      topCategory: '',\n      topCategoryAmount: 0,\n      monthOverMonth: 0,\n      unusualTransactions: 0,\n      predictedMonthlySpend: 0\n    };\n\n    const expenseData = expenses as any[];\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    \n    const thisMonthExpenses = expenseData.filter(expense => {\n      const expenseDate = new Date(expense.date);\n      return expenseDate.getMonth() === currentMonth && expenseDate.getFullYear() === currentYear;\n    });\n\n    const totalSpent = thisMonthExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n    const daysInMonth = new Date().getDate();\n    const avgDailySpend = totalSpent / daysInMonth;\n\n    // Category analysis\n    const categoryTotals = thisMonthExpenses.reduce((acc, expense) => {\n      const category = expense.categoryName || 'Other';\n      acc[category] = (acc[category] || 0) + parseFloat(expense.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n    const topCategory = Object.entries(categoryTotals).reduce((max, [cat, amount]) => \n      amount > max[1] ? [cat, amount] : max, ['', 0]);\n\n    // Predict monthly spend\n    const daysRemaining = new Date(currentYear, currentMonth + 1, 0).getDate() - daysInMonth;\n    const predictedMonthlySpend = totalSpent + (avgDailySpend * daysRemaining);\n\n    return {\n      totalSpent,\n      avgDailySpend,\n      topCategory: topCategory[0],\n      topCategoryAmount: topCategory[1],\n      monthOverMonth: 0, // Would need previous month data\n      unusualTransactions: 0, // Would need more complex analysis\n      predictedMonthlySpend\n    };\n  }, [expenses]);\n\n  const handleGenerateInsights = useCallback(() => {\n    generateInsightsMutation.mutate();\n  }, [generateInsightsMutation]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'high': return 'text-red-600 bg-red-100';\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\n      default: return 'text-green-600 bg-green-100';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'high': return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'medium': return <TrendingUp className=\"h-4 w-4\" />;\n      default: return <CheckCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (insightsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center space-x-3\">\n              <Brain className=\"h-8 w-8 text-purple-500\" />\n              <span>AI Financial Insights</span>\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Intelligent analysis of your spending patterns and personalized financial recommendations\n            </p>\n          </div>\n          <Button \n            onClick={handleGenerateInsights}\n            disabled={generateInsightsMutation.isPending}\n            className=\"bg-purple-600 hover:bg-purple-700\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${generateInsightsMutation.isPending ? 'animate-spin' : ''}`} />\n            {generateInsightsMutation.isPending ? 'Analyzing...' : 'Refresh Insights'}\n          </Button>\n        </div>\n\n        {/* Quick Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-100 text-sm\">This Month</p>\n                  <p className=\"text-2xl font-bold\">{formatCurrency(spendingAnalysis.totalSpent)}</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-blue-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-100 text-sm\">Daily Average</p>\n                  <p className=\"text-2xl font-bold\">{formatCurrency(spendingAnalysis.avgDailySpend)}</p>\n                </div>\n                <BarChart3 className=\"h-8 w-8 text-green-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-100 text-sm\">Top Category</p>\n                  <p className=\"text-lg font-bold truncate\">{spendingAnalysis.topCategory || 'None'}</p>\n                  <p className=\"text-sm text-purple-200\">{formatCurrency(spendingAnalysis.topCategoryAmount)}</p>\n                </div>\n                <Target className=\"h-8 w-8 text-purple-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-orange-100 text-sm\">Predicted Monthly</p>\n                  <p className=\"text-2xl font-bold\">{formatCurrency(spendingAnalysis.predictedMonthlySpend)}</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-orange-200\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"patterns\">Spending Patterns</TabsTrigger>\n            <TabsTrigger value=\"recommendations\">Recommendations</TabsTrigger>\n            <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* AI Insights */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n                    <span>Smart Insights</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {(insights as any) && (insights as any).length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {(insights as any).slice(0, 3).map((insight: InsightData, index: number) => (\n                        <div key={index} className={`p-4 rounded-lg border ${getSeverityColor(insight.severity)}`}>\n                          <div className=\"flex items-start space-x-3\">\n                            {getSeverityIcon(insight.severity)}\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-medium text-sm\">{insight.title}</h4>\n                              <p className=\"text-xs mt-1 opacity-90\">{insight.description}</p>\n                              {insight.actionable && (\n                                <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                                  <Target className=\"h-3 w-3 mr-1\" />\n                                  Actionable\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Brain className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">No insights generated yet</p>\n                      <Button \n                        onClick={handleGenerateInsights}\n                        className=\"mt-4\"\n                        disabled={generateInsightsMutation.isPending}\n                      >\n                        Generate Insights\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Budget Health */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <PiggyBank className=\"h-5 w-5 text-green-500\" />\n                    <span>Budget Health</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {(budgets as any) && (budgets as any).length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {(budgets as any).slice(0, 3).map((budget: any, index: number) => {\n                        const spent = 0; // Would calculate from expenses\n                        const budgetAmount = parseFloat(budget.amount) || 1;\n                        const percentage = (spent / budgetAmount) * 100;\n                        return (\n                          <div key={index} className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"font-medium\">{budget.categoryName || 'All Categories'}</span>\n                              <span>{percentage.toFixed(0)}%</span>\n                            </div>\n                            <Progress value={percentage} className=\"h-2\" />\n                            <div className=\"flex justify-between text-xs text-gray-600\">\n                              <span>{formatCurrency(spent)}</span>\n                              <span>{formatCurrency(parseFloat(budget.amount))}</span>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">No budgets set</p>\n                      <p className=\"text-xs text-gray-500\">Create budgets to track your progress</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"patterns\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Spending Pattern Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <BarChart3 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Advanced pattern analysis coming soon</p>\n                  <p className=\"text-xs text-gray-500\">We're building detailed spending behavior insights</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"recommendations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Personalized Recommendations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Award className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">AI recommendations will appear here</p>\n                  <p className=\"text-xs text-gray-500\">Based on your spending patterns and goals</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"goals\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Financial Goals Tracking</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Goal tracking feature coming soon</p>\n                  <p className=\"text-xs text-gray-500\">Set and monitor your financial objectives</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":16303},"client/src/pages/reports.tsx":{"content":"import React, { useState, useMemo, useCallback } from 'react';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Legend\n} from \"recharts\";\nimport { \n  Download, \n  FileText, \n  Calendar, \n  Filter,\n  TrendingUp,\n  DollarSign,\n  PieChart as PieChartIcon,\n  BarChart3,\n  Printer,\n  Mail,\n  RefreshCw\n} from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ReportFilters {\n  startDate: string;\n  endDate: string;\n  category: string;\n  minAmount: string;\n  maxAmount: string;\n}\n\nexport default function ReportsPage() {\n  const { toast } = useToast();\n  const [filters, setFilters] = useState<ReportFilters>({\n    startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],\n    endDate: new Date().toISOString().split('T')[0],\n    category: 'all',\n    minAmount: '',\n    maxAmount: ''\n  });\n  const [reportType, setReportType] = useState('summary');\n  const [isExporting, setIsExporting] = useState(false);\n\n  const { data: expenses, isLoading: expensesLoading } = useQuery({\n    queryKey: ['/api/expenses'],\n    retry: false,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: ['/api/categories'],\n    retry: false,\n  });\n\n  const { data: budgets } = useQuery({\n    queryKey: ['/api/budgets'],\n    retry: false,\n  });\n\n  const filteredExpenses = useMemo(() => {\n    if (!expenses) return [];\n    \n    return (expenses as any[]).filter(expense => {\n      const expenseDate = new Date(expense.date);\n      const startDate = new Date(filters.startDate);\n      const endDate = new Date(filters.endDate);\n      const amount = parseFloat(expense.amount);\n      \n      // Date filter\n      if (expenseDate < startDate || expenseDate > endDate) return false;\n      \n      // Category filter\n      if (filters.category !== 'all' && expense.categoryId !== filters.category) return false;\n      \n      // Amount filters\n      if (filters.minAmount && amount < parseFloat(filters.minAmount)) return false;\n      if (filters.maxAmount && amount > parseFloat(filters.maxAmount)) return false;\n      \n      return true;\n    });\n  }, [expenses, filters]);\n\n  const reportData = useMemo(() => {\n    const totalAmount = filteredExpenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n    const avgAmount = filteredExpenses.length > 0 ? totalAmount / filteredExpenses.length : 0;\n    \n    // Category breakdown\n    const categoryBreakdown = filteredExpenses.reduce((acc, expense) => {\n      const category = expense.categoryName || 'Other';\n      acc[category] = (acc[category] || 0) + parseFloat(expense.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n    const categoryData = Object.entries(categoryBreakdown).map(([name, value]) => ({\n      name,\n      value,\n      percentage: ((value / totalAmount) * 100).toFixed(1)\n    }));\n\n    // Daily spending trend\n    const dailySpending = filteredExpenses.reduce((acc, expense) => {\n      const date = new Date(expense.date).toISOString().split('T')[0];\n      acc[date] = (acc[date] || 0) + parseFloat(expense.amount);\n      return acc;\n    }, {} as Record<string, number>);\n\n    const trendData = Object.entries(dailySpending)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([date, amount]) => ({\n        date,\n        amount,\n        formattedDate: new Date(date).toLocaleDateString('en-IN', { month: 'short', day: 'numeric' })\n      }));\n\n    return {\n      totalAmount,\n      avgAmount,\n      transactionCount: filteredExpenses.length,\n      categoryData,\n      trendData,\n      topCategory: categoryData.length > 0 ? categoryData.reduce((max, cat) => cat.value > max.value ? cat : max) : null\n    };\n  }, [filteredExpenses]);\n\n  const handleFilterChange = useCallback((key: keyof ReportFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  }, []);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const exportToPDF = useCallback(async () => {\n    setIsExporting(true);\n    try {\n      const element = document.getElementById('report-content');\n      if (!element) return;\n\n      const canvas = await html2canvas(element, {\n        scale: 2,\n        allowTaint: true,\n        useCORS: true\n      });\n      \n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgWidth = 210;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      \n      pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);\n      pdf.save(`SpendSight-Report-${new Date().toISOString().split('T')[0]}.pdf`);\n      \n      toast({\n        title: \"Report Exported\",\n        description: \"Your financial report has been downloaded as PDF.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Could not export report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  }, [toast]);\n\n  const exportToCSV = useCallback(() => {\n    const csvData = filteredExpenses.map(expense => ({\n      Date: new Date(expense.date).toLocaleDateString('en-IN'),\n      Description: expense.description,\n      Category: expense.categoryName || 'Other',\n      Amount: parseFloat(expense.amount),\n    }));\n\n    const headers = Object.keys(csvData[0] || {});\n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => headers.map(header => row[header as keyof typeof row]).join(','))\n    ].join('\\\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `SpendSight-Data-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Data Exported\",\n      description: \"Your expense data has been downloaded as CSV.\",\n    });\n  }, [filteredExpenses, toast]);\n\n  const COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n\n  if (expensesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4 md:p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-48 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 md:p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col md:flex-row md:justify-between md:items-center space-y-4 md:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 flex items-center space-x-3\">\n              <FileText className=\"h-6 md:h-8 w-6 md:w-8 text-blue-500\" />\n              <span>Financial Reports</span>\n            </h1>\n            <p className=\"text-gray-600 mt-2 text-sm md:text-base\">\n              Comprehensive analysis of your spending patterns and financial health\n            </p>\n          </div>\n          <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n            <Button \n              onClick={exportToCSV}\n              variant=\"outline\"\n              disabled={isExporting || filteredExpenses.length === 0}\n              className=\"w-full sm:w-auto\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n            <Button \n              onClick={exportToPDF}\n              disabled={isExporting || filteredExpenses.length === 0}\n              className=\"w-full sm:w-auto\"\n            >\n              {isExporting ? (\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Printer className=\"h-4 w-4 mr-2\" />\n              )}\n              {isExporting ? 'Exporting...' : 'Export PDF'}\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-lg\">\n              <Filter className=\"h-5 w-5\" />\n              <span>Report Filters</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n              <div>\n                <Label htmlFor=\"startDate\" className=\"text-sm\">Start Date</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={filters.startDate}\n                  onChange={(e) => handleFilterChange('startDate', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"endDate\" className=\"text-sm\">End Date</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={filters.endDate}\n                  onChange={(e) => handleFilterChange('endDate', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"category\" className=\"text-sm\">Category</Label>\n                <Select value={filters.category} onValueChange={(value) => handleFilterChange('category', value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {(categories as any)?.map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"minAmount\" className=\"text-sm\">Min Amount (₹)</Label>\n                <Input\n                  id=\"minAmount\"\n                  type=\"number\"\n                  placeholder=\"0\"\n                  value={filters.minAmount}\n                  onChange={(e) => handleFilterChange('minAmount', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"maxAmount\" className=\"text-sm\">Max Amount (₹)</Label>\n                <Input\n                  id=\"maxAmount\"\n                  type=\"number\"\n                  placeholder=\"No limit\"\n                  value={filters.maxAmount}\n                  onChange={(e) => handleFilterChange('maxAmount', e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Content */}\n        <div id=\"report-content\" className=\"space-y-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6\">\n            <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-blue-100 text-xs md:text-sm\">Total Spent</p>\n                    <p className=\"text-lg md:text-2xl font-bold\">{formatCurrency(reportData.totalAmount)}</p>\n                  </div>\n                  <DollarSign className=\"h-6 md:h-8 w-6 md:w-8 text-blue-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-green-100 text-xs md:text-sm\">Average</p>\n                    <p className=\"text-lg md:text-2xl font-bold\">{formatCurrency(reportData.avgAmount)}</p>\n                  </div>\n                  <TrendingUp className=\"h-6 md:h-8 w-6 md:w-8 text-green-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-purple-100 text-xs md:text-sm\">Transactions</p>\n                    <p className=\"text-lg md:text-2xl font-bold\">{reportData.transactionCount}</p>\n                  </div>\n                  <BarChart3 className=\"h-6 md:h-8 w-6 md:w-8 text-purple-200\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n              <CardContent className=\"p-4 md:p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-orange-100 text-xs md:text-sm\">Top Category</p>\n                    <p className=\"text-sm md:text-lg font-bold truncate\">\n                      {reportData.topCategory?.name || 'None'}\n                    </p>\n                    {reportData.topCategory && (\n                      <p className=\"text-xs text-orange-200\">\n                        {formatCurrency(reportData.topCategory.value)}\n                      </p>\n                    )}\n                  </div>\n                  <PieChartIcon className=\"h-6 md:h-8 w-6 md:w-8 text-orange-200\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Spending Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Spending Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 md:h-80\">\n                  {reportData.trendData.length > 0 ? (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={reportData.trendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                        <XAxis \n                          dataKey=\"formattedDate\" \n                          stroke=\"#666\"\n                          fontSize={12}\n                        />\n                        <YAxis \n                          tickFormatter={(value) => `₹${value}`}\n                          stroke=\"#666\"\n                          fontSize={12}\n                        />\n                        <Tooltip \n                          formatter={(value: number) => [formatCurrency(value), 'Amount']}\n                          labelFormatter={(label) => `Date: ${label}`}\n                        />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"amount\" \n                          stroke=\"#2563eb\" \n                          strokeWidth={2}\n                          dot={{ fill: '#2563eb', strokeWidth: 2, r: 4 }}\n                          activeDot={{ r: 6 }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-gray-500\">\n                      <div className=\"text-center\">\n                        <BarChart3 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-sm\">No data for selected period</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Category Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Category Breakdown</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 md:h-80\">\n                  {reportData.categoryData.length > 0 ? (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={reportData.categoryData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={60}\n                          innerRadius={30}\n                          dataKey=\"value\"\n                          label={({ name, percentage }) => `${name}: ${percentage}%`}\n                          labelLine={false}\n                          fontSize={12}\n                        >\n                          {reportData.categoryData.map((entry: any, index: number) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                          ))}\n                        </Pie>\n                        <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                        <Legend fontSize={12} />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-gray-500\">\n                      <div className=\"text-center\">\n                        <PieChartIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-sm\">No expenses in selected period</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Transaction Details */}\n          {filteredExpenses.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Transaction Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-2\">Date</th>\n                        <th className=\"text-left p-2\">Description</th>\n                        <th className=\"text-left p-2\">Category</th>\n                        <th className=\"text-right p-2\">Amount</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredExpenses.slice(0, 20).map((expense: any, index: number) => (\n                        <tr key={index} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"p-2\">{new Date(expense.date).toLocaleDateString('en-IN')}</td>\n                          <td className=\"p-2 truncate max-w-xs\">{expense.description}</td>\n                          <td className=\"p-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {expense.categoryName || 'Other'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-2 text-right font-medium\">\n                            {formatCurrency(parseFloat(expense.amount))}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                  {filteredExpenses.length > 20 && (\n                    <p className=\"text-center text-gray-500 text-sm mt-4\">\n                      Showing 20 of {filteredExpenses.length} transactions. Export for full data.\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20773}},"version":1}